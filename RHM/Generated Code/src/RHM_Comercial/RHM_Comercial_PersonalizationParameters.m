/*
 Generated by Sybase Unwired Platform 
 Compiler version - 2.0.1.314
*/ 

#import "RHM_Comercial_PersonalizationParameters.h"
#import "SUPJsonObject.h"
#import "SUPJsonReader.h"
#import "RHM_Comercial_Clientes.h"
#import "RHM_Comercial_SessionPersonalization.h"
#import "SUPObjectList.h"

@interface RHM_Comercial_PersonalizationParameters(private)
-(void)submitPending;
@end
@implementation RHM_Comercial_PersonalizationParameters

@synthesize listSessionPK = _listSessionPK;
@synthesize username = _username;
@synthesize usernameUserDefined = _usernameUserDefined;
@synthesize password = _password;
@synthesize passwordUserDefined = _passwordUserDefined;

- (id)initFromJson:(SUPJsonObject*)json:(int32_t)flags
{
    if (json == nil)
    {
        [self release];
        return nil;
    }
    if ((self = [super init]))
    {
        [self readJson:json:flags];
    }
    return self;   
}

- (void)readJson:(SUPJsonObject*)json:(int32_t)flags
{
    SUPObjectList *newListSessionPK = [RHM_Comercial_SessionPersonalization fromJSONList:[json getArray:@"listSessionPK"]];
    self.listSessionPK = newListSessionPK;
    [newListSessionPK release];
    self.username = [json getString:@"username"];
    self.usernameUserDefined = [json getBoolean:@"usernameUserDefined"];
    self.password = [json getString:@"password"];
    self.passwordUserDefined = [json getBoolean:@"passwordUserDefined"];
}

- (SUPJsonObject*)json:(int32_t)flags
{
    SUPJsonObject *newJson = [[SUPJsonObject alloc] init];
	[newJson setArray:@"listSessionPK":[RHM_Comercial_SessionPersonalization toJSONList:self.listSessionPK]];
	[newJson setString:@"username":self.username];
	[newJson setBoolean:@"usernameUserDefined":self.usernameUserDefined];
	[newJson setString:@"password":self.password];
	[newJson setBoolean:@"passwordUserDefined":self.passwordUserDefined];
    [newJson autorelease];
    return newJson;
}
+ (SUPObjectList*)fromJSONList:(SUPJsonArray*)jsonArray
{
	if(jsonArray == nil)
		return nil;
	
	SUPObjectList* instanceList = [[SUPObjectList alloc] initWithCapacity:1];
	if(instanceList == nil)
		return nil;

	for (SUPJsonObject* jsonObject in jsonArray)
	{
	    RHM_Comercial_PersonalizationParameters* inst = [[RHM_Comercial_PersonalizationParameters alloc] initFromJson:jsonObject:0];
	    [instanceList add:inst];
	    [inst release];
	}
	return instanceList;
}

+ (SUPJsonArray*)toJSONList:(SUPObjectList*)instanceList
{
	SUPJsonArray* jsonArray = [[SUPJsonArray alloc] init];
	[jsonArray autorelease];
	for (RHM_Comercial_PersonalizationParameters* inst in instanceList)
	{
		[jsonArray add:[inst json:0]];
	}
	return jsonArray;
}
- (void)dealloc
{
    if(_listSessionPK)
    {
        [_listSessionPK release];
        _listSessionPK = nil;
    }
    if(_username)
    {
        [_username release];
        _username = nil;
    }
    if(_password)
    {
        [_password release];
        _password = nil;
    }
	[super dealloc];
}

static SUPClassMetaData* RHM_Comercial_PersonalizationParameters_META_DATA;
static BOOL _valid_ = NO;

+ (SUPClassMetaData*)metaData
{
    if (! (_valid_))
    {
 	   	RHM_Comercial_PersonalizationParameters_META_DATA = [[SUPEntityMetaData alloc] init];
 	   	SUPObjectList *attributes = [SUPObjectList listWithCapacity:7];
       	RHM_Comercial_PersonalizationParameters_META_DATA.name = @"PersonalizationParameters";
       	[RHM_Comercial_PersonalizationParameters_META_DATA setClass:[RHM_Comercial_PersonalizationParameters class]];
 
        	// Handle attributes
 		int attribute_counter = 0;
 
 		attribute_counter++;
		SUPAttributeMetaData_DC* a_listSessionPK = [RHM_Comercial_RHM_ComercialDB createAttributeMetaData:attribute_counter:(SUPString)@"listSessionPK":[SUPDataType forName:@"SessionPersonalization*"]];
  		[attributes addThis:a_listSessionPK];
 
 		attribute_counter++;
		SUPAttributeMetaData_DC* a_username = [RHM_Comercial_RHM_ComercialDB createAttributeMetaData:attribute_counter:(SUPString)@"username":[SUPDataType forName:@"string"]];
  		[attributes addThis:a_username];
 
 		attribute_counter++;
		SUPAttributeMetaData_DC* a_password = [RHM_Comercial_RHM_ComercialDB createAttributeMetaData:attribute_counter:(SUPString)@"password":[SUPDataType forName:@"string"]];
  		[attributes addThis:a_password];
 		RHM_Comercial_PersonalizationParameters_META_DATA.attributes = attributes;
 		
 		SUPAttributeMap * attributeMap = [SUPAttributeMap getInstance];
    	[attributeMap setAttributes:attributes];
    	RHM_Comercial_PersonalizationParameters_META_DATA.attributeMap = [attributeMap finishInit];
  
  		// Handle operations
 		int operation_counter = 0;	
 		operation_counter++;
 		SUPOperationMetaData* o_load = [RHM_Comercial_RHM_ComercialDB createOperationMetaData:operation_counter:(SUPString)@"load":[SUPDataType forName:@"void"]:true];
 		[o_load setIsStatic:NO];
 		[o_load finishInit];
 		operation_counter++;
 		SUPOperationMetaData* o_save = [RHM_Comercial_RHM_ComercialDB createOperationMetaData:operation_counter:(SUPString)@"save":[SUPDataType forName:@"void"]:true];
 		[o_save setIsStatic:NO];
 		[o_save finishInit];
 		operation_counter++;
 		SUPOperationMetaData* o_saveUserNamePassword = [RHM_Comercial_RHM_ComercialDB createOperationMetaData:operation_counter:(SUPString)@"saveUserNamePassword":[SUPDataType forName:@"void"]:true];
 		[o_saveUserNamePassword setIsStatic:NO];
 		[o_saveUserNamePassword finishInit];
 
  		SUPObjectList *operations = [SUPObjectList listWithCapacity:operation_counter];
 		[operations addThis:o_load];
 		[operations addThis:o_save];
 		[operations addThis:o_saveUserNamePassword];
 		RHM_Comercial_PersonalizationParameters_META_DATA.operations = operations;
 		
		SUPOperationMap *operationMap = [SUPOperationMap getInstance];
		[operationMap setOperations:operations];
		RHM_Comercial_PersonalizationParameters_META_DATA.operationMap = [operationMap finishInit];
	
     	_valid_ = YES;
	}
	return RHM_Comercial_PersonalizationParameters_META_DATA;
}

+ (RHM_Comercial_PersonalizationParameters*)getInstance
{
    RHM_Comercial_PersonalizationParameters* me = [[RHM_Comercial_PersonalizationParameters alloc] init];
    [me autorelease];
    return me;
}


/*!
  @method
  @abstract Generated instance method 
  @throws SUPPersistenceException
 */
- (void)load
{
    
    self.listSessionPK = [RHM_Comercial_SessionPersonalization findAll];
    for(RHM_Comercial_SessionPersonalization* p in self.listSessionPK)
    {
    	if([p.key_name compare:@"username"] == 0)
    	{
    		if(p.value)
    			self.username = p.value /*string*/;
    		else
    			self.username = nil;
    		self.usernameUserDefined = p.user_defined;
    	}
    	if([p.key_name compare:@"password"] == 0)
    	{
    		if(p.value)
    			self.password = p.value /*string*/;
    		else
    			self.password = nil;
    		self.passwordUserDefined = p.user_defined;
    	}
    }
}

/*!
  @method
  @abstract Generated instance method 
  @throws SUPPersistenceException
 */
- (void)save
{
    
    
    RHM_Comercial_SessionPersonalizationList *ssl = (RHM_Comercial_SessionPersonalizationList*)[RHM_Comercial_SessionPersonalization findAll];
    for(RHM_Comercial_SessionPersonalization* p in ssl)
    {
        if([p.key_name compare:@"username"] == 0)
        {
    		if(self.username)
    			p.value = self.username /*string*/;
            else
            	p.value = nil;
            p.user_defined = self.usernameUserDefined;
        }
        if([p.key_name compare:@"password"] == 0)
        {
    		if(self.password)
    			p.value = self.password /*string*/;
            else
            	p.value = nil;
            p.user_defined = self.passwordUserDefined;
        }
    }
    if([RHM_Comercial_RHM_ComercialDB packageHasSubscription])
    	[self submitPending];
}

/*!
  @method
  @abstract Generated instance method 
  @throws SUPPersistenceException
 */
- (void)saveUserNamePassword
{
    SUPObjectList *ssl = [RHM_Comercial_SessionPersonalization findAll];
    for(RHM_Comercial_SessionPersonalization* p in ssl)
    {
    	if([p.key_name compare:@"username"] == 0)
    	{
    		if(self.username)
    			p.value = self.username;
    	}
    	if([p.key_name compare:@"password"] == 0)
    	{
    		if(self.password)
    			p.value = self.password;
    	}
    }
}

/*!
  @method
  @abstract Generated instance method 
  @throws SUPPersistenceException
 */
- (void)submitPending
{
    RHM_Comercial_PersonalizationParameters* pp = [RHM_Comercial_RHM_ComercialDB getPersonalizationParameters];
    @try
    {
    	[[RHM_Comercial_Clientes getSynchronizationParameters] beforeSync:pp];
    } @catch(SUPPersistenceException *spe) 
    {
    }
}

@end