/*
 Generated by Sybase Unwired Platform 
 Compiler version - 2.0.1.314
*/ 

#import "RHM_Comercial_SessionPersonalization.h"
#import "SUPJsonObject.h"

#import "SUPObjectList.h"

@implementation RHM_Comercial_SessionPersonalization

@synthesize key_name = _key_name;
@synthesize value = _value;
@synthesize user_defined = _user_defined;

static SUPObjectList* _listSessionPK;

+ (SUPObjectList*)listSessionPK
{

    return _listSessionPK;
}

+ (void)setListSessionPK:(SUPObjectList*)newListSessionPK
{
    if (newListSessionPK != _listSessionPK)
    {
		[_listSessionPK release];
        _listSessionPK = [newListSessionPK retain];
    }
}

- (id)initFromJson:(SUPJsonObject*)json:(int32_t)flags
{
    if (json == nil)
    {
        [self release];
        return nil;
    }
    if ((self = [super init]))
    {
        [self readJson:json:flags];
    }
    return self;   
}

- (void)readJson:(SUPJsonObject*)json:(int32_t)flags
{
    self.key_name = [json getString:@"key_name"];
    self.value = [json getNullableString:@"value"];
    self.user_defined = [json getBoolean:@"user_defined"];
}

- (SUPJsonObject*)json:(int32_t)flags
{
    SUPJsonObject *newJson = [[SUPJsonObject alloc] init];
	[newJson setString:@"key_name":self.key_name];
	[newJson setNullableString:@"value":self.value];
	[newJson setBoolean:@"user_defined":self.user_defined];
    [newJson autorelease];
    return newJson;
}
+ (SUPObjectList*)fromJSONList:(SUPJsonArray*)jsonArray
{
	if(jsonArray == nil)
		return nil;
	
	SUPObjectList* instanceList = [[SUPObjectList alloc] initWithCapacity:1];
	if(instanceList == nil)
		return nil;

	for (SUPJsonObject* jsonObject in jsonArray)
	{
	    RHM_Comercial_SessionPersonalization* inst = [[RHM_Comercial_SessionPersonalization alloc] initFromJson:jsonObject:0];
	    [instanceList add:inst];
	    [inst release];
	}
	return instanceList;
}

+ (SUPJsonArray*)toJSONList:(SUPObjectList*)instanceList
{
	SUPJsonArray* jsonArray = [[SUPJsonArray alloc] init];
	[jsonArray autorelease];
	for (RHM_Comercial_SessionPersonalization* inst in instanceList)
	{
		[jsonArray add:[inst json:0]];
	}
	return jsonArray;
}
- (id) init
{
    if ((self = [super init]))
    {
        _user_defined = YES;
    }
    return self;    
}
- (void)dealloc
{
    if(_key_name)
    {
        [_key_name release];
        _key_name = nil;
    }
    if(_value)
    {
        [_value release];
        _value = nil;
    }
	[super dealloc];
}

static SUPClassMetaData* RHM_Comercial_SessionPersonalization_META_DATA;
static BOOL _valid_ = NO;

+ (SUPClassMetaData*)metaData
{
    if (! (_valid_))
    {
 	   	RHM_Comercial_SessionPersonalization_META_DATA = [[SUPEntityMetaData alloc] init];
 	   	SUPObjectList *attributes = [SUPObjectList listWithCapacity:7];
       	RHM_Comercial_SessionPersonalization_META_DATA.name = @"SessionPersonalization";
       	[RHM_Comercial_SessionPersonalization_META_DATA setClass:[RHM_Comercial_SessionPersonalization class]];
 
        	// Handle attributes
 		int attribute_counter = 0;
 
 		attribute_counter++;
		SUPAttributeMetaData_DC* a_key_name = [RHM_Comercial_RHM_ComercialDB createAttributeMetaData:attribute_counter:(SUPString)@"key_name":[SUPDataType forName:@"string"]];
  		[attributes addThis:a_key_name];
 
 		attribute_counter++;
		SUPAttributeMetaData_DC* a_value = [RHM_Comercial_RHM_ComercialDB createAttributeMetaData:attribute_counter:(SUPString)@"value":[SUPDataType forName:@"string?"]];
  		[attributes addThis:a_value];
 
 		attribute_counter++;
		SUPAttributeMetaData_DC* a_user_defined = [RHM_Comercial_RHM_ComercialDB createAttributeMetaData:attribute_counter:(SUPString)@"user_defined":[SUPDataType forName:@"boolean"]];
  		[attributes addThis:a_user_defined];
 
 		attribute_counter++;
		SUPAttributeMetaData_DC* a_listSessionPK = [RHM_Comercial_RHM_ComercialDB createAttributeMetaData:attribute_counter:(SUPString)@"listSessionPK":[SUPDataType forName:@"SessionPersonalization*"]];
  		[attributes addThis:a_listSessionPK];
 		RHM_Comercial_SessionPersonalization_META_DATA.attributes = attributes;
 		
 		SUPAttributeMap * attributeMap = [SUPAttributeMap getInstance];
    	[attributeMap setAttributes:attributes];
    	RHM_Comercial_SessionPersonalization_META_DATA.attributeMap = [attributeMap finishInit];
  
  		// Handle operations
 		int operation_counter = 0;	
 		operation_counter++;
 		SUPOperationMetaData* o_findAll = [RHM_Comercial_RHM_ComercialDB createOperationMetaData:operation_counter:(SUPString)@"findAll":[SUPDataType forName:@"SessionPersonalization*"]:true];
 		[o_findAll setIsStatic:YES];
 		[o_findAll finishInit];
 
  		SUPObjectList *operations = [SUPObjectList listWithCapacity:operation_counter];
 		[operations addThis:o_findAll];
 		RHM_Comercial_SessionPersonalization_META_DATA.operations = operations;
 		
		SUPOperationMap *operationMap = [SUPOperationMap getInstance];
		[operationMap setOperations:operations];
		RHM_Comercial_SessionPersonalization_META_DATA.operationMap = [operationMap finishInit];
	
     	_valid_ = YES;
	}
	return RHM_Comercial_SessionPersonalization_META_DATA;
}

+ (RHM_Comercial_SessionPersonalization*)getInstance
{
    RHM_Comercial_SessionPersonalization* me = [[RHM_Comercial_SessionPersonalization alloc] init];
    [me autorelease];
    return me;
}


/*!
  @method
  @abstract Generated class method 
  @throws SUPPersistenceException
 */
+ (SUPObjectList*)findAll
{
    if (_listSessionPK == nil)
        [self setListSessionPK:[[[RHM_Comercial_SessionPersonalizationList alloc] init] autorelease]];
        
    BOOL p1 = NO;
    BOOL p2 = NO;
    for(RHM_Comercial_SessionPersonalization* p in _listSessionPK)
    {
        if([p.key_name compare:@"username"] == 0)
            p1 = YES;
        if([p.key_name compare:@"password"] == 0)
            p2 = YES;
    }
    if (!p1)
    {
        RHM_Comercial_SessionPersonalization* p = [[[RHM_Comercial_SessionPersonalization alloc] init] autorelease];
        p.key_name = @"username";
    	p.value = @"";
        if (p.value && ([p.value length] == 0))
        {
            p.value = nil;
        }    
        [_listSessionPK add:p];
    }
    if (!p2)
    {
        RHM_Comercial_SessionPersonalization* p = [[[RHM_Comercial_SessionPersonalization alloc] init] autorelease];
        p.key_name = @"password";
    	p.value = @"";
        if (p.value && ([p.value length] == 0))
        {
            p.value = nil;
        }    
        [_listSessionPK add:p];
    }
    return _listSessionPK;
}

@end