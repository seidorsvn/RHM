/*
 Generated by Sybase Unwired Platform 
 Compiler version - 2.0.1.314
*/ 

#import "RHM_Comercial_ClientesSynchronizationParameters.h"
#import "SUPJsonObject.h"
#import "SUPJsonArray.h"
#import "SUPJsonMessage.h"
#import "SUPJsonReader.h"
#import "SUPConnectionWrapper.h"
#import "SUPLocalTransaction.h"
#import "SUPObjectNotFoundException.h"
#import "SUPNoSuchOperationException.h"
#import "SUPQuery.h"
#import "SUPQueueConnection.h"
#import "SUPResultSetWrapper.h"
#import "SUPStatementWrapper.h"
#import "SUPStatementBuilder.h"
#import "SUPEntityMetaData.h"
#import "SUPOperationMetaData.h"
#import "SUPAttributeMetaData.h"
#import "SUPAttributeMetaData_DC.h"
#import "SUPDatabaseMetaData.h"
#import "SUPSelectItem.h"
#import "SUPAttributeMap.h"
#import "SUPOperationMap.h"
#import "SUPDataType.h"
#import "MBODebugLogger.h"
#import "RHM_Comercial_RHM_ComercialDB.h"
#import "RHM_Comercial_KeyGenerator.h"
#import "RHM_Comercial_LocalKeyGenerator.h"
#import "RHM_Comercial_KeyGeneratorPK.h"
#import "RHM_Comercial_LocalKeyGeneratorPK.h"
#import "RHM_Comercial_LogRecordImpl.h"
#import "RHM_Comercial_Clientes.h"
#import "SUPCallbackHandler.h"
#import "MBODebugSettings.h"

static NSObject<SUPCallbackHandler>* _callbackHandler = nil;

@interface RHM_Comercial_ClientesSynchronizationParameters(private)
- (void)bind:(id<SUPResultSetWrapper>)resultSet;
+ (RHM_Comercial_ClientesSynchronizationParameters*)find:(NSString*)id inTable:(SUPEntityTable)table;
+ (void)importData:(RHM_Comercial_ClientesSynchronizationParameters*)serverEntity:(SUPJsonObject*)jsonObject;
- (void)merge:(RHM_Comercial_ClientesSynchronizationParameters*)entity withJson:(SUPJsonObject*)json;
- (void)setAllAttributesFrom:(RHM_Comercial_ClientesSynchronizationParameters*)other;
@end
@implementation RHM_Comercial_ClientesSynchronizationParameters

@synthesize agente = _agente;
@synthesize agenteUserDefined = _agenteUserDefined;
@synthesize size = _size;
@synthesize user = _user;

- (NSString*)user
{
    return _user;
}

- (void)setAgente:(NSString*)newAgente
{
    if (newAgente != self->_agente)
    {
		[self->_agente release];
        self->_agente = [newAgente retain];
        self->_isDirty = YES;
		_agenteUserDefined = YES;
    }
}

- (void)setAgenteUserDefined:(BOOL)newAgenteUserDefined
{
    if (newAgenteUserDefined != self->_agenteUserDefined)
    {
        self->_agenteUserDefined = newAgenteUserDefined;
        self->_isDirty = YES;
    }
}

- (void)setSize:(int32_t)newSize
{
    if (newSize != self->_size)
    {
        self->_size = newSize;
        self->_isDirty = YES;
    }
}

- (void)setUser:(NSString*)newUser
{
    if (newUser != self->_user)
    {
		[self->_user release];
        self->_user = [newUser retain];
        self->_isNew = YES;
    }
}




- (id)initFromJson:(SUPJsonObject*)json:(int32_t)flags
{
    if (json == nil)
    {
        [self release];
        return nil;
    }
    if ((self = [super init]))
    {
        [self readJson:json:flags];
    }
    return self;   
}

- (void)readJson:(SUPJsonObject*)json:(int32_t)flags
{
        if ([json containsKey:@"agente"])
    {
        self.agente = [json getNullableString:@"agente"];
    }
        if ([json containsKey:@"agenteUserDefined"])
    {
        self.agenteUserDefined = [json getBoolean:@"agenteUserDefined"];
    }
        if ([json containsKey:@"size"])
    {
        self.size = [json getInt:@"size"];
    }
        if ([json containsKey:@"user"])
    {
        self.user = [json getString:@"user"];
    }
    if ([json containsKey:@"_op"])
    {
    	unichar op = [json getChar:@"_op"];
    	self->_isNew = (op == PendingCreate);
    	self->_isDirty = (op == PendingUpdate);
    	self->_isDeleted = (op == PendingDelete);
    } else {
    	self->_isNew = YES;
    	self->_isDirty = NO;
    	self->_isDeleted = NO;
    }
}

- (SUPJsonObject*)json:(int32_t)flags
{
    SUPJsonObject *newJson = [[SUPJsonObject alloc] init];
	BOOL all = YES;
	if (self.isNew || self.isCreated)
	{
	    [newJson setChar:@"_op":PendingCreate];
	}
	else if (self.isDirty || self.isUpdated)
	{
	    [newJson setChar:@"_op":PendingUpdate];
	}
	else if ([self isDeleted])
	{
	    [newJson setChar:@"_op":PendingDelete];
	}
	else if ((flags & 2) == 2)
	{
	    [newJson setChar:@"_op":HasPendingChild];
		all = NO;
	}
	[newJson setString:@"user":self.user];
	if (all)
	{
	    [newJson setNullableString:@"agente":self.agente];
	    [newJson setBoolean:@"agenteUserDefined":self.agenteUserDefined];
	    [newJson setInt:@"size":self.size];
	}
    [newJson autorelease];
    return newJson;
}
+ (SUPObjectList*)fromJSONList:(SUPJsonArray*)jsonArray
{
	if(jsonArray == nil)
		return nil;
	
	SUPObjectList* instanceList = [[SUPObjectList alloc] initWithCapacity:1];
	if(instanceList == nil)
		return nil;

	for (SUPJsonObject* jsonObject in jsonArray)
	{
	    RHM_Comercial_ClientesSynchronizationParameters* inst = [[RHM_Comercial_ClientesSynchronizationParameters alloc] initFromJson:jsonObject:0];
	    [instanceList add:inst];
	    [inst release];
	}
	return instanceList;
}

+ (SUPJsonArray*)toJSONList:(SUPObjectList*)instanceList
{
	SUPJsonArray* jsonArray = [[SUPJsonArray alloc] init];
	[jsonArray autorelease];
	for (RHM_Comercial_ClientesSynchronizationParameters* inst in instanceList)
	{
		[jsonArray add:[inst json:0]];
	}
	return jsonArray;
}
- (void)dealloc
{
    if(_agente)
    {
        [_agente release];
        _agente = nil;
    }
    if(_user)
    {
        [_user release];
        _user = nil;
    }
	[super dealloc];
}

- (void)bind:(id<SUPResultSetWrapper>)resultSet
{
    @try
    {
        self.agente = [resultSet getNullableString:1:@"agente"];
        self.agenteUserDefined = [resultSet getBoolean:2:@"agenteUserDefined"];
        self.size = [resultSet getInt:3:@"size"];
        self.user = [resultSet getString:4:@"user"];
                        [self setOriginalState:nil];
        self->_originalStateValid = NO;
                                                self->_isNew = NO;
        self->_isDirty = NO;
        self->_isDeleted = NO;
    }
    @catch (SUPPersistenceException *spe)
    {
        MBOLogPersistenceException(SUPCLIENTRT_TEMPLATE_PERSISTENCEEXCEPTIONMSG,@"bind",[spe message]);
    }
}

- (void)clearRelationshipObjects
{
}

- (void)copyAll:(RHM_Comercial_ClientesSynchronizationParameters*)other
{
	[self copyAll:other withParent:(SUPAbstractEntity*)other];
}


- (void)copyAll:(RHM_Comercial_ClientesSynchronizationParameters*)other withParent:(SUPAbstractEntity*)parent
{
    [self setAgente:other.agente];
    
    [self setAgenteUserDefined:other.agenteUserDefined];
    
    [self setSize:other.size];
    
    [self setUser:other.user];
    
	self->_isNew = other->_isNew;

}

- (void)create
{
	[super create];
}

- (void)delete
{
	[self beforeSave];
	[super delete];
	[RHM_Comercial_Clientes unsubscribe_all_pull];
}

- (RHM_Comercial_RHM_ComercialDB*)database
{
   return [RHM_Comercial_RHM_ComercialDB instance];
}

+ (RHM_Comercial_ClientesSynchronizationParameters*)find_by_id_string:(NSString*)id_string
{
    if(id_string == nil) return nil;
	NSString* key;
    key = id_string;
    return [RHM_Comercial_ClientesSynchronizationParameters find:key];
	
}

+ (RHM_Comercial_ClientesSynchronizationParameters*)find:(NSString*)id
{
	return [self find:id inTable:MainEntityTable];
}

+ (RHM_Comercial_ClientesSynchronizationParameters*)find:(NSString*)id_ inTable:(SUPEntityTable)table
{
    RHM_Comercial_ClientesSynchronizationParameters* result = nil;
	RHM_Comercial_ClientesSynchronizationParameters* downloadState = nil;
    id<SUPStatementWrapper> preparedStatement = nil;
    id<SUPConnectionWrapper> connection = nil;
    @try
    {
        [[RHM_Comercial_RHM_ComercialDB dblock] readLock];
    
    	connection = [RHM_Comercial_RHM_ComercialDB getConnectionWrapper];
    	//@synchronized(connection)
    	{
        	@try
        	{
            	if (table == MainEntityTable)
            	{
                	preparedStatement = [connection prepareStatement:@"select \"agente\",\"agenteUserDefined\",\"size\",\"user\" from co_rhm_comercial_1_0_clientessp where \"user\"=?"];
            	}
            	else
            	{
                	preparedStatement = [connection prepareStatement:@"select \"agente\",\"agenteUserDefined\",\"size\",\"user\" from co_rhm_comercial_1_0_clientessp_os where \"user\"=?"];
            	}
            	[preparedStatement setString:1:@"user":id_];
            	id<SUPResultSetWrapper> resultSet = [preparedStatement executeQuery];
            	while ([resultSet next])
            	{
            		if(result) [result release];
                	result = [[RHM_Comercial_ClientesSynchronizationParameters alloc] init];
                	[result bind:resultSet];
                	if (table == OriginalStateEntityTable)
                	{
                    	result->_pending = false;
                    	result->_pendingChange = NotPending;
                	}
                	if (result.pending)
                	{
                    	break;
                	}
                	else
                	{
 	              		downloadState = [RHM_Comercial_ClientesSynchronizationParameters getInstance];
                		[downloadState copyAll:result];
                	}
            	}
            	[resultSet close];      
        	}
        	@catch (SUPPersistenceException *spe)
        	{
            	@throw spe;
        	}
    	}
    }
    @catch (SUPPersistenceException *spe)
    {
        MBOLogPersistenceException(SUPCLIENTRT_TEMPLATE_PERSISTENCEEXCEPTIONMSG,@"find",[spe message]);
    }
    @finally
    {
    	if(preparedStatement) [preparedStatement close];
        [connection releaseToPool];
        [[RHM_Comercial_RHM_ComercialDB dblock] unlock];
    }
    if(result)
    {
    	if(result.pending)
    		result.downloadState = (SUPAbstractEntity*)downloadState;
  		//if(result != downloadState)
  		//	[downloadState release];
    }
    [result autorelease];
    return result;
}

+ (id<SUPSynchronizationGroup>)getSynchronizationGroup
{
	return [RHM_Comercial_RHM_ComercialDB getSyncGroupForName:@""];
}


- (id<SUPStatementWrapper>)getCreateStatement:(id<SUPConnectionWrapper>)connection forTable:(SUPEntityTable)table;
{
    id<SUPStatementWrapper> preparedStatement;
    preparedStatement = [connection prepareStatement:@"insert into co_rhm_comercial_1_0_clientessp (\"agente\",\"agenteUserDefined\",\"size\",\"user\") values (?,?,?,?)"];
    // Add updated values
    [preparedStatement setNullableString:1:@"agente":self.agente];
    [preparedStatement setBoolean:2:@"agenteUserDefined":self.agenteUserDefined];
    [preparedStatement setInt:3:@"size":self.size];
	if(self.user == nil)
		self.user = @"";
		//RHM_Comercial_ClientesSynchronizationParameters getCreateStatement:user not allowed to be null
    [preparedStatement setString:4:@"user":self.user];
	return preparedStatement;
}

- (id<SUPStatementWrapper>)getDeleteStatement:(id<SUPConnectionWrapper>)connection forTable:(SUPEntityTable)table;
{
    id<SUPStatementWrapper> preparedStatement;
    preparedStatement = [connection prepareStatement:@"delete from co_rhm_comercial_1_0_clientessp where \"user\"=?"];
    // Fill in values for "where" clause
    [preparedStatement setString:1:@"user":self.user];
	return preparedStatement;
}

- (id<SUPStatementWrapper>)getUpdateStatement:(id<SUPConnectionWrapper>)connection forTable:(SUPEntityTable)table;
{
    id<SUPStatementWrapper> preparedStatement;
	preparedStatement = [connection prepareStatement:@"update co_rhm_comercial_1_0_clientessp set \"agente\"=?,\"agenteUserDefined\"=?,\"size\"=? where \"user\"=?"];
    // Add updated values
    int parameterIndex = 0;
    parameterIndex++;
    [preparedStatement setNullableString:parameterIndex:@"agente":self.agente];
    parameterIndex++;
    [preparedStatement setBoolean:parameterIndex:@"agenteUserDefined":self.agenteUserDefined];
    parameterIndex++;
    [preparedStatement setInt:parameterIndex:@"size":self.size];
    // Fill in values for "where" clause
    parameterIndex++;
    [preparedStatement setString:parameterIndex:@"user":self.user];
	return preparedStatement;
}

- (NSString*)_pk
{
	return [self id];
}

- (NSString*)id
{
    return self.user;
}

- (NSString*)keyToString
{
	return [[self id] description];
}



+ (RHM_Comercial_ClientesSynchronizationParameters*)load:(NSString*)id
{
	RHM_Comercial_ClientesSynchronizationParameters* entity = [self find:id inTable:MainEntityTable];
	//RHM_Comercial_ClientesSynchronizationParameters* entity = [self find:id];
    if (entity == nil)
    {
		@throw [SUPObjectNotFoundException withMessage:@"-load: in RHM_Comercial_ClientesSynchronizationParameters: entity not found in database"];
    }
    return entity;
}

static SUPEntityMetaData* RHM_Comercial_ClientesSynchronizationParameters_META_DATA;
static BOOL _valid_ = NO;

+ (SUPEntityMetaData*)metaData
{
    if (! (_valid_))
    {
       RHM_Comercial_ClientesSynchronizationParameters_META_DATA = [SUPEntityMetaData getInstance];
       RHM_Comercial_ClientesSynchronizationParameters_META_DATA.id = _ENTITY_NUMBER_FOR_RHM_Comercial_ClientesSynchronizationParameters_;
       RHM_Comercial_ClientesSynchronizationParameters_META_DATA.name = @"ClientesSynchronizationParameters";
       [RHM_Comercial_ClientesSynchronizationParameters_META_DATA setClass:[RHM_Comercial_ClientesSynchronizationParameters class]];

	   RHM_Comercial_ClientesSynchronizationParameters_META_DATA.isClientOnly = YES;

       // Handle attributes
       
       	SUPObjectList *attributes = [SUPObjectList getInstance];
		SUPAttributeMetaData_DC* a_agente = [RHM_Comercial_RHM_ComercialDB createAttributeMetaData:1:(SUPString)@"agente":[SUPDataType forName:@"string?"]];
		[a_agente setColumn:@"\"agente\""];
		[a_agente setMaxLength:10];
		[a_agente setPrecision:0];
		[a_agente setScale:0];
		[a_agente setIsKey:NO];
		SUPAttributeMetaData_DC* a_size = [RHM_Comercial_RHM_ComercialDB createAttributeMetaData:2:(SUPString)@"size":[SUPDataType forName:@"int"]];
		[a_size setColumn:@"\"size\""];
		[a_size setMaxLength:-1];
		[a_size setPrecision:0];
		[a_size setScale:0];
		[a_size setIsKey:NO];
		SUPAttributeMetaData_DC* a_user = [RHM_Comercial_RHM_ComercialDB createAttributeMetaData:3:(SUPString)@"user":[SUPDataType forName:@"string"]];
		[a_user setColumn:@"\"user\""];
		[a_user setMaxLength:300];
		[a_user setPrecision:0];
		[a_user setScale:0];
		[a_user setIsKey:YES];
 		
 		[attributes addThis:a_agente];
 		[attributes addThis:a_size];
 		[attributes addThis:a_user];
 		RHM_Comercial_ClientesSynchronizationParameters_META_DATA.attributes = attributes;
 		
 		SUPAttributeMap * attributeMap = [SUPAttributeMap getInstance];
    	[attributeMap setAttributes:attributes];
    	RHM_Comercial_ClientesSynchronizationParameters_META_DATA.attributeMap = [attributeMap finishInit];
 
 		// Handle operations
 		SUPOperationMetaData* o_getAgenteForSub0_1 = [RHM_Comercial_RHM_ComercialDB createOperationMetaData:1:(SUPString)@"getAgenteForSub0":[SUPDataType forName:@"string?"]:true];
  		{
 			SUPObjectList *parameters_list = nil;
 			SUPParameterMetaData* p_getAgenteForSub0_pp = [RHM_Comercial_RHM_ComercialDB createParameterMetaData:1:(SUPString)@"pp":[SUPDataType forName:@"PersonalizationParameters"]];
 			parameters_list = [SUPObjectList listWithCapacity:1];
 			[parameters_list addThis:p_getAgenteForSub0_pp];
 			o_getAgenteForSub0_1.parameters = parameters_list;

 		}
		[o_getAgenteForSub0_1 setIsStatic:NO];
		[o_getAgenteForSub0_1 setIsCreate:NO];
		[o_getAgenteForSub0_1 setIsUpdate:NO];
		[o_getAgenteForSub0_1 setIsDelete:NO]; 		
 		[o_getAgenteForSub0_1 finishInit];
 		SUPOperationMetaData* o_submitPending_0 = [RHM_Comercial_RHM_ComercialDB createOperationMetaData:2:(SUPString)@"submitPending":[SUPDataType forName:@"void"]:true];
		[o_submitPending_0 setIsStatic:NO];
		[o_submitPending_0 setIsCreate:NO];
		[o_submitPending_0 setIsUpdate:NO];
		[o_submitPending_0 setIsDelete:NO]; 		
 		[o_submitPending_0 finishInit];
 		SUPOperationMetaData* o_refresh_0 = [RHM_Comercial_RHM_ComercialDB createOperationMetaData:3:(SUPString)@"refresh":[SUPDataType forName:@"void"]:true];
		[o_refresh_0 setIsStatic:NO];
		[o_refresh_0 setIsCreate:NO];
		[o_refresh_0 setIsUpdate:NO];
		[o_refresh_0 setIsDelete:NO]; 		
 		[o_refresh_0 finishInit];
 		SUPOperationMetaData* o__pk_0 = [RHM_Comercial_RHM_ComercialDB createOperationMetaData:4:(SUPString)@"_pk":[SUPDataType forName:@"string?"]:true];
		[o__pk_0 setIsStatic:NO];
		[o__pk_0 setIsCreate:NO];
		[o__pk_0 setIsUpdate:NO];
		[o__pk_0 setIsDelete:NO]; 		
 		[o__pk_0 finishInit];
 		SUPOperationMetaData* o_save_0 = [RHM_Comercial_RHM_ComercialDB createOperationMetaData:5:(SUPString)@"save":[SUPDataType forName:@"void"]:true];
		[o_save_0 setIsStatic:NO];
		[o_save_0 setIsCreate:NO];
		[o_save_0 setIsUpdate:NO];
		[o_save_0 setIsDelete:NO]; 		
 		[o_save_0 finishInit];
 
  		SUPObjectList *operations = [SUPObjectList listWithCapacity:5];
 		[operations addThis:o_getAgenteForSub0_1];
 		[operations addThis:o_submitPending_0];
 		[operations addThis:o_refresh_0];
 		[operations addThis:o__pk_0];
 		[operations addThis:o_save_0];
 		RHM_Comercial_ClientesSynchronizationParameters_META_DATA.operations = operations;
 		
		SUPOperationMap *operationMap = [SUPOperationMap getInstance];
		[operationMap setOperations:operations];
		RHM_Comercial_ClientesSynchronizationParameters_META_DATA.operationMap = [operationMap finishInit];
		
		RHM_Comercial_ClientesSynchronizationParameters_META_DATA.table = @"\"co_rhm_comercial_1_0_clientessp\"";

 		[RHM_Comercial_ClientesSynchronizationParameters_META_DATA retain];
     	_valid_ = YES;

	}
	return RHM_Comercial_ClientesSynchronizationParameters_META_DATA;
}

- (void)merge:(RHM_Comercial_ClientesSynchronizationParameters*)entity withJson:(SUPJsonObject*)json
{
	[super merge:entity withJson:json];
    if(![json containsKey:@"agente"] )
    {
    	self.agente = entity.agente;
    }
    else if(![json getNullableString:@"agente"])
    {
    	self.agente = entity.agente;
    }
    if(![json containsKey:@"agenteUserDefined"] )
    {
    	self.agenteUserDefined = entity.agenteUserDefined;
    }
    else if(![json getBoolean:@"agenteUserDefined"])
    {
    	self.agenteUserDefined = entity.agenteUserDefined;
    }
    if(![json containsKey:@"size"] )
    {
    	self.size = entity.size;
    }
    else if(![json getInt:@"size"])
    {
    	self.size = entity.size;
    }
    if(![json containsKey:@"user"] )
    {
    	self.user = entity.user;
    }
    else if(![json getString:@"user"])
    {
    	self.user = entity.user;
    }
}

+ (RHM_Comercial_ClientesSynchronizationParameters*)getInstance
{
    RHM_Comercial_ClientesSynchronizationParameters* me = [[RHM_Comercial_ClientesSynchronizationParameters alloc] init];
    [me autorelease];
    return me;
}

- (SUPObjectList*)getLogRecords
{
    SUPQuery *query = [SUPQuery getInstance];
    [query from:@"LogRecordImpl":@"a"];
    query.testCriteria = (SUPTestCriteria*)[[SUPAttributeTest match:@"component":@"ClientesSynchronizationParameters"] and:[SUPAttributeTest match:@"entityKey":[self keyToString]]];
    [query orderBy:@"requestId":[SUPSortOrder DESCENDING]];

    RHM_Comercial_LogRecordImplList* list = [RHM_Comercial_LogRecordImpl findWithQuery:query];
    return (SUPObjectList*)list;
}

- (id<SUPLogRecord>)createLogRecord:(int32_t)level withMessage:(NSString*)message
{
    {
        RHM_Comercial_LogRecordImpl *log = [[RHM_Comercial_LogRecordImpl alloc] init];
        //log.level = [NSString stringWithFormat:@"%ld",[SUPLogLevel fromString:level]];
        log.level = level;
        log.message = message;
        log.messageId = [RHM_Comercial_KeyGenerator generateId];
        log.requestId = [NSString stringWithFormat:@"%ld",log.messageId];
        NSDate *timestamp = [NSDate dateWithTimeIntervalSinceNow:0];
        log.timestamp = timestamp;
        log.code = CLIENT_ENTITY_CREATED_LOGRECORD_CODE;
        log.component = @"ClientesSynchronizationParameters";
        log.entityKey = [self keyToString];
        [log save];
        [log autorelease];
        return log;
    }
}

- (void)setAllAttributesFrom:(RHM_Comercial_ClientesSynchronizationParameters*)other
{
	// Child lists are set to nil, to prevent infinite recursion
	// when this method is used inside the bind: method
    	[self setAgente:other.agente];
    	[self setAgenteUserDefined:other.agenteUserDefined];
    	[self setSize:other.size];
    	[self setUser:other.user];
}

+ (NSObject<SUPCallbackHandler>*)callbackHandler
{
	return _callbackHandler;
}

+ (void)registerCallbackHandler:(NSObject<SUPCallbackHandler>*)newCallbackHandler
{
	if(newCallbackHandler != _callbackHandler)
	{
		[_callbackHandler release];
		_callbackHandler = [newCallbackHandler retain];
	}
}

- (void)refresh
{
    if (!self.isNew)
    {
        RHM_Comercial_ClientesSynchronizationParameters* entity = [RHM_Comercial_ClientesSynchronizationParameters load:[self id]];
        [self copyAll:entity];
        _isNew = NO;
        _isDirty = NO;
    }
}











-(void)submitPending
{
	RHM_Comercial_PersonalizationParameters* pp = [RHM_Comercial_RHM_ComercialDB getPersonalizationParameters];

	@try
	{
		[self beforeSync:pp];
	} @catch (SUPPersistenceException *spe)
	{
	}
}

- (NSString*)toString
{
	NSString* str = [NSString stringWithFormat:@"\
	ClientesSynchronizationParameters = \n\
	    agente = %@,\n\
	    agenteUserDefined = %i,\n\
	    size = %i,\n\
	    user = %@,\n\
	    isNew = %i,\n\
        isDirty = %i,\n\
        isDeleted = %i,\n\
	\n"
    	,self.agente
    	,self.agenteUserDefined
    	,self.size
    	,self.user
		,self.isNew
		,self.isDirty
		,self.isDeleted
	];
	return str;

}

- (NSString*)description
{
	return [self toString];
}

- (void)save
{
	[self beforeSave];
    if (self->_isNew)
    {
        [self create];
    }
    else if (self->_isDirty)
    {
        [self update];
    }
	[self submitPending];
}

- (void)createOrUpdateClientOnly
{
   	id<SUPConnectionWrapper> connection = nil;
    id<SUPStatementWrapper> statement = nil;
    @try
    {
        [[RHM_Comercial_RHM_ComercialDB dblock] writeLock];
    	connection = [RHM_Comercial_RHM_ComercialDB getConnectionWrapper];
        RHM_Comercial_ClientesSynchronizationParameters *ms = [RHM_Comercial_ClientesSynchronizationParameters find:[self id] inTable:MainEntityTable];
		if(ms)
		{
			statement = [self getUpdateStatement:connection forTable:MainEntityTable];
			[statement executeUpdate:YES];
		} else {
		    statement = [self getCreateStatement:connection forTable:MainEntityTable];
			[statement executeInsert];
		}
			
		self->_isNew = NO;
		self->_isDirty = NO;
		self->_isDeleted = NO;
	}
	@catch (SUPPersistenceException *spe)
    {
        MBOLogPersistenceException(SUPCLIENTRT_TEMPLATE_PERSISTENCEEXCEPTIONMSG,@"createPending",[spe message]);
    }
    @finally
    {
        [statement close];
        [connection releaseToPool];
        [[RHM_Comercial_RHM_ComercialDB dblock] unlock];
    }    
}

- (void)createPending:(BOOL)isPending
{
	[self createOrUpdateClientOnly];
}

- (void)updatePending:(BOOL)isPending
{
	[self createOrUpdateClientOnly];
}




- (SUPAbstractEntity*)topLevelParent
{
	return self;
}

- (void)update
{
	[super update];
}


/*!
  @method
  @abstract Generated instance method 
  @throws SUPPersistenceException
 */
- (void)beforeSave
{
    self.user = [RHM_Comercial_RHM_ComercialDB getSyncUsername];
}


/*!
  @method
  @abstract Generated instance method 
  @param pp
  @throws SUPPersistenceException
 */
- (NSString*)getAgenteForSub0:(RHM_Comercial_PersonalizationParameters*)pp
{
	if(self.agenteUserDefined)
		return self->_agente;
	return @"9999";
}

- (NSString*)agente
{
	RHM_Comercial_PersonalizationParameters *pp = [RHM_Comercial_RHM_ComercialDB getPersonalizationParameters];
	return [self getAgenteForSub0:pp];
}

/*!
  @method
  @abstract Generated instance method 
  @param pp
  @throws SUPPersistenceException
 */
- (void)beforeSync:(RHM_Comercial_PersonalizationParameters*)pp
{
    
    RHM_Comercial_ClientesSynchronizationParameters *sptmpvar = [RHM_Comercial_ClientesSynchronizationParameters find:[RHM_Comercial_RHM_ComercialDB getSyncUsername]];
    if(sptmpvar == nil)
    {
    	sptmpvar = [RHM_Comercial_ClientesSynchronizationParameters getInstance];
    }
    
    NSString* agentetmp = [sptmpvar getAgenteForSub0:pp];
    [RHM_Comercial_Clientes subscribe_pull:agentetmp];
}

@end