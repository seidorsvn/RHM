/*
 Generated by Sybase Unwired Platform 
 Compiler version - 2.0.1.314
*/ 

#import "RHM_Comercial_TS_CLI_DEST.h"
#import "SUPJsonObject.h"
#import "SUPJsonArray.h"
#import "SUPJsonMessage.h"
#import "SUPJsonReader.h"
#import "SUPConnectionWrapper.h"
#import "SUPLocalTransaction.h"
#import "SUPObjectNotFoundException.h"
#import "SUPNoSuchOperationException.h"
#import "SUPQuery.h"
#import "SUPQueueConnection.h"
#import "SUPResultSetWrapper.h"
#import "SUPStatementWrapper.h"
#import "SUPStatementBuilder.h"
#import "SUPEntityMetaData.h"
#import "SUPOperationMetaData.h"
#import "SUPAttributeMetaData.h"
#import "SUPAttributeMetaData_DC.h"
#import "SUPDatabaseMetaData.h"
#import "SUPSelectItem.h"
#import "SUPAttributeMap.h"
#import "SUPOperationMap.h"
#import "SUPDataType.h"
#import "MBODebugLogger.h"
#import "RHM_Comercial_RHM_ComercialDB.h"
#import "RHM_Comercial_KeyGenerator.h"
#import "RHM_Comercial_LocalKeyGenerator.h"
#import "RHM_Comercial_KeyGeneratorPK.h"
#import "RHM_Comercial_LocalKeyGeneratorPK.h"
#import "RHM_Comercial_LogRecordImpl.h"
#import "SUPCallbackHandler.h"
#import "RHM_Comercial_Clientes.h"
#import "MBODebugSettings.h"
#import "SUPEntityAlias.h"

static NSObject<SUPCallbackHandler>* _callbackHandler = nil;

@interface RHM_Comercial_TS_CLI_DEST(private)
- (void)bind:(id<SUPResultSetWrapper>)resultSet;
- (void)bindWithQuery:(id<SUPResultSetWrapper>)resultSet:(SUPQuery*)query;
+ (RHM_Comercial_TS_CLI_DEST*)find:(int64_t)id inTable:(SUPEntityTable)table;
+ (void)importData:(RHM_Comercial_TS_CLI_DEST*)serverEntity:(SUPJsonObject*)jsonObject;
- (void)merge:(RHM_Comercial_TS_CLI_DEST*)entity withJson:(SUPJsonObject*)json;
- (void)setAllAttributesFrom:(RHM_Comercial_TS_CLI_DEST*)other;
@end
@implementation RHM_Comercial_TS_CLI_DEST

@synthesize BUKRS = _BUKRS;
@synthesize KUNNR = _KUNNR;
@synthesize VKORG = _VKORG;
@synthesize VTWEG = _VTWEG;
@synthesize SPART = _SPART;
@synthesize DESTIN = _DESTIN;
@synthesize DEFECTO = _DEFECTO;
@synthesize surrogateKey = _surrogateKey;

- (int64_t)surrogateKey
{
    if (_surrogateKey == 0)
        _surrogateKey = (int64_t)[RHM_Comercial_KeyGenerator generateId];
    return _surrogateKey;
}

- (void)setBUKRS:(NSString*)newBUKRS
{
    if (newBUKRS != self->_BUKRS)
    {
		[self->_BUKRS release];
        self->_BUKRS = [newBUKRS retain];
        self->_isDirty = YES;
    }
}

- (void)setKUNNR:(NSString*)newKUNNR
{
    if (newKUNNR != self->_KUNNR)
    {
		[self->_KUNNR release];
        self->_KUNNR = [newKUNNR retain];
        self->_isDirty = YES;
    }
}

- (void)setVKORG:(NSString*)newVKORG
{
    if (newVKORG != self->_VKORG)
    {
		[self->_VKORG release];
        self->_VKORG = [newVKORG retain];
        self->_isDirty = YES;
    }
}

- (void)setVTWEG:(NSString*)newVTWEG
{
    if (newVTWEG != self->_VTWEG)
    {
		[self->_VTWEG release];
        self->_VTWEG = [newVTWEG retain];
        self->_isDirty = YES;
    }
}

- (void)setSPART:(NSString*)newSPART
{
    if (newSPART != self->_SPART)
    {
		[self->_SPART release];
        self->_SPART = [newSPART retain];
        self->_isDirty = YES;
    }
}

- (void)setDESTIN:(NSString*)newDESTIN
{
    if (newDESTIN != self->_DESTIN)
    {
		[self->_DESTIN release];
        self->_DESTIN = [newDESTIN retain];
        self->_isDirty = YES;
    }
}

- (void)setDEFECTO:(NSString*)newDEFECTO
{
    if (newDEFECTO != self->_DEFECTO)
    {
		[self->_DEFECTO release];
        self->_DEFECTO = [newDEFECTO retain];
        self->_isDirty = YES;
    }
}

- (void)setSurrogateKey:(int64_t)newSurrogateKey
{
    if (newSurrogateKey != self->_surrogateKey)
    {
        self->_surrogateKey = newSurrogateKey;
        self->_isNew = YES;
    }
}


- (SUPLong)replayCounter
{
    if ((_replayCounter == 0))
    {  
        _replayCounter = ((SUPLong)([RHM_Comercial_LocalKeyGenerator generateId]));
    }
    return _replayCounter;
}

- (void)setReplayCounter:(SUPLong)newReplayCounter
{
    if (! ((_replayCounter == newReplayCounter)))
    {  
        self->_isDirty = YES;
        _replayCounter = newReplayCounter;
    }
}

- (id)initFromJson:(SUPJsonObject*)json:(int32_t)flags
{
    if (json == nil)
    {
        [self release];
        return nil;
    }
    if ((self = [super init]))
    {
        [self readJson:json:flags];
    }
    return self;   
}

- (void)readJson:(SUPJsonObject*)json:(int32_t)flags
{
        if ([json containsKey:@"BUKRS"])
    {
        self.BUKRS = [json getString:@"BUKRS"];
    }
        if ([json containsKey:@"KUNNR"])
    {
        self.KUNNR = [json getString:@"KUNNR"];
    }
        if ([json containsKey:@"VKORG"])
    {
        self.VKORG = [json getString:@"VKORG"];
    }
        if ([json containsKey:@"VTWEG"])
    {
        self.VTWEG = [json getString:@"VTWEG"];
    }
        if ([json containsKey:@"SPART"])
    {
        self.SPART = [json getString:@"SPART"];
    }
        if ([json containsKey:@"DESTIN"])
    {
        self.DESTIN = [json getString:@"DESTIN"];
    }
        if ([json containsKey:@"DEFECTO"])
    {
        self.DEFECTO = [json getString:@"DEFECTO"];
    }
                        if ([json containsKey:@"surrogateKey"])
    {
        self.surrogateKey = [json getLong:@"surrogateKey"];
    }
            if ([json containsKey:@"disableSubmit"])
    {
        self.disableSubmit = [json getBoolean:@"disableSubmit"];
    }
    if ([json containsKey:@"_op"])
    {
    	unichar op = [json getChar:@"_op"];
    	self->_isNew = (op == PendingCreate);
    	self->_isDirty = (op == PendingUpdate);
    	self->_isDeleted = (op == PendingDelete);
    } else {
    	self->_isNew = YES;
    	self->_isDirty = NO;
    	self->_isDeleted = NO;
    }
}

- (SUPJsonObject*)json:(int32_t)flags
{
    SUPJsonObject *newJson = [[SUPJsonObject alloc] init];
	BOOL all = YES;
	if(self.isNew)
	{
	    [newJson setChar:@"_op":PendingCreate];
	}
	else
	{
		if(self.pendingChange != NotPending && self.replayCounter > self.replayPending)
		    [newJson setChar:@"_op":self.pendingChange];
	}
	[newJson setLong:@"surrogateKey":self.surrogateKey];
	if (all)
	{
	    [newJson setString:@"BUKRS":self.BUKRS];
	    [newJson setString:@"KUNNR":self.KUNNR];
	    [newJson setString:@"VKORG":self.VKORG];
	    [newJson setString:@"VTWEG":self.VTWEG];
	    [newJson setString:@"SPART":self.SPART];
	    [newJson setString:@"DESTIN":self.DESTIN];
	    [newJson setString:@"DEFECTO":self.DEFECTO];
	    [newJson setBoolean:@"disableSubmit":self.disableSubmit];
	}
    [newJson setString:@"?":@"TS_CLI_DEST"];
    [newJson autorelease];
    return newJson;
}
+ (SUPObjectList*)fromJSONList:(SUPJsonArray*)jsonArray
{
	if(jsonArray == nil)
		return nil;
	
	SUPObjectList* instanceList = [[SUPObjectList alloc] initWithCapacity:1];
	if(instanceList == nil)
		return nil;

	for (SUPJsonObject* jsonObject in jsonArray)
	{
	    RHM_Comercial_TS_CLI_DEST* inst = [[RHM_Comercial_TS_CLI_DEST alloc] initFromJson:jsonObject:0];
	    [instanceList add:inst];
	    [inst release];
	}
	return instanceList;
}

+ (SUPJsonArray*)toJSONList:(SUPObjectList*)instanceList
{
	SUPJsonArray* jsonArray = [[SUPJsonArray alloc] init];
	[jsonArray autorelease];
	for (RHM_Comercial_TS_CLI_DEST* inst in instanceList)
	{
		[jsonArray add:[inst json:0]];
	}
	return jsonArray;
}
- (void)dealloc
{
    if(_BUKRS)
    {
        [_BUKRS release];
        _BUKRS = nil;
    }
    if(_KUNNR)
    {
        [_KUNNR release];
        _KUNNR = nil;
    }
    if(_VKORG)
    {
        [_VKORG release];
        _VKORG = nil;
    }
    if(_VTWEG)
    {
        [_VTWEG release];
        _VTWEG = nil;
    }
    if(_SPART)
    {
        [_SPART release];
        _SPART = nil;
    }
    if(_DESTIN)
    {
        [_DESTIN release];
        _DESTIN = nil;
    }
    if(_DEFECTO)
    {
        [_DEFECTO release];
        _DEFECTO = nil;
    }
	[super dealloc];
}

- (void)bind:(id<SUPResultSetWrapper>)resultSet
{
    @try
    {
        self.BUKRS = [resultSet getString:1:@"a"];
        self.KUNNR = [resultSet getString:2:@"b"];
        self.VKORG = [resultSet getString:3:@"c"];
        self.VTWEG = [resultSet getString:4:@"d"];
        self.SPART = [resultSet getString:5:@"e"];
        self.DESTIN = [resultSet getString:6:@"f"];
        self.DEFECTO = [resultSet getString:7:@"g"];
        self->_pending = [resultSet getBoolean:8:@"_pf"];
        self->_pendingChange = [resultSet getChar:9:@"_pc"];
        self->_replayPending = [resultSet getLong:10:@"_rp"];
        self->_replayFailure = [resultSet getLong:11:@"_rf"];
        self.surrogateKey = [resultSet getLong:12:@"h"];
        self->_replayCounter = [resultSet getLong:13:@"_rc"];
        self.disableSubmit = [resultSet getBoolean:14:@"_ds"];
                        [self setOriginalState:nil];
        self->_originalStateValid = NO;
                                                self->_isNew = NO;
        self->_isDirty = NO;
        self->_isDeleted = NO;
    }
    @catch (SUPPersistenceException *spe)
    {
        MBOLogPersistenceException(SUPCLIENTRT_TEMPLATE_PERSISTENCEEXCEPTIONMSG,@"bind",[spe message]);
    }
}

- (void)bindWithQuery:(id<SUPResultSetWrapper>)resultSet:(SUPQuery*)query
{

    SUPDatabaseMetaData *database = [RHM_Comercial_RHM_ComercialDB metaData];
    SUPEntityMetaData *entity = [RHM_Comercial_TS_CLI_DEST metaData];
    SUPObjectList* cl = [SUPObjectList listWithCapacity:10];
    
    if(query.selectItems != nil)
    {
    	for (SUPSelectItem* si in query.selectItems)
    	{
        	SUPEntityMetaData* itemEntity = [SUPStatementBuilder findEntity:database:query:si.alias];
        	SUPAttributeMetaData* amd = [itemEntity getAttribute:si.attribute];
        	[cl add:amd];
    	}
    } else 
    {
        for (SUPAttributeMetaData* amd in entity.attributes)
        {
            if ([amd isPersistent])
            {
                [cl add:amd];
            }
        }
    }
    self->_isNew = NO;
    self->_isDirty = NO;
    
    for(int j=0;j<[cl size];j++)
    {
        SUPAttributeMetaData *amd = (SUPAttributeMetaData *)[cl item:j];
		if([amd.name isEqualToString:@"BUKRS"])
        	self.BUKRS = [resultSet getString:j+1:@"a"];
		if([amd.name isEqualToString:@"KUNNR"])
        	self.KUNNR = [resultSet getString:j+1:@"b"];
		if([amd.name isEqualToString:@"VKORG"])
        	self.VKORG = [resultSet getString:j+1:@"c"];
		if([amd.name isEqualToString:@"VTWEG"])
        	self.VTWEG = [resultSet getString:j+1:@"d"];
		if([amd.name isEqualToString:@"SPART"])
        	self.SPART = [resultSet getString:j+1:@"e"];
		if([amd.name isEqualToString:@"DESTIN"])
        	self.DESTIN = [resultSet getString:j+1:@"f"];
		if([amd.name isEqualToString:@"DEFECTO"])
        	self.DEFECTO = [resultSet getString:j+1:@"g"];
		if([amd.name isEqualToString:@"pending"])
        	self->_pending = [resultSet getBoolean:j+1:@"_pf"];
		if([amd.name isEqualToString:@"pendingChange"])
        	self->_pendingChange = [resultSet getChar:j+1:@"_pc"];
		if([amd.name isEqualToString:@"replayPending"])
        	self->_replayPending = [resultSet getLong:j+1:@"_rp"];
		if([amd.name isEqualToString:@"replayFailure"])
        	self->_replayFailure = [resultSet getLong:j+1:@"_rf"];
		if([amd.name isEqualToString:@"surrogateKey"])
        	self.surrogateKey = [resultSet getLong:j+1:@"h"];
		if([amd.name isEqualToString:@"replayCounter"])
        	self->_replayCounter = [resultSet getLong:j+1:@"_rc"];
		if([amd.name isEqualToString:@"disableSubmit"])
        	self.disableSubmit = [resultSet getBoolean:j+1:@"_ds"];
    }
    self->_isNew = NO;
    self->_isDirty = NO;
    self->_isDeleted = NO;
}

- (void)clearRelationshipObjects
{
}

- (void)copyAll:(RHM_Comercial_TS_CLI_DEST*)other
{
	[self copyAll:other withParent:(SUPAbstractEntity*)other];
}


- (void)copyAll:(RHM_Comercial_TS_CLI_DEST*)other withParent:(SUPAbstractEntity*)parent
{
    [self setBUKRS:other.BUKRS];
    
    [self setKUNNR:other.KUNNR];
    
    [self setVKORG:other.VKORG];
    
    [self setVTWEG:other.VTWEG];
    
    [self setSPART:other.SPART];
    
    [self setDESTIN:other.DESTIN];
    
    [self setDEFECTO:other.DEFECTO];
    
    self->_pending = other->_pending;
    
    self->_pendingChange = other->_pendingChange;
    
    self->_replayPending = other->_replayPending;
    
    self->_replayFailure = other->_replayFailure;
    
    [self setSurrogateKey:other.surrogateKey];
    
    self->_replayCounter = other->_replayCounter;
    
    [self setDisableSubmit:other.disableSubmit];
    
	self->_isNew = other->_isNew;

}

+ (int32_t)countWithQuery:(SUPQuery*)query
{
    id<SUPConnectionWrapper> connection = nil;
id<SUPStatementWrapper> statement = nil;
id<SUPResultSetWrapper> resultSet = nil;
    {
        @try
        {    
            [[RHM_Comercial_RHM_ComercialDB dblock] readLock];
            connection = [RHM_Comercial_RHM_ComercialDB getConnectionWrapper];
            int32_t count = 0;

            statement = [SUPStatementBuilder prepareQuery:connection:[RHM_Comercial_RHM_ComercialDB metaData]:[RHM_Comercial_TS_CLI_DEST metaData]:query];
            resultSet = [statement executeQuery];
            while ([resultSet next])
            {
                count++;   
            }
			return count;
        }
        @catch (NSException *e)
        {
                    MBOLogPersistenceException(SUPCLIENTRT_PERSISTENCEEXCEPTIONMSG, @"countWithQuery",[NSString stringWithFormat:@"%@: %@",[e name],[e reason]]);
        }
        @finally
        {
            if(resultSet) [resultSet close];
            if(statement) [statement close];
            [connection releaseToPool];
            [[RHM_Comercial_RHM_ComercialDB dblock] unlock];
        }
    }
	return 0;
}

- (void)cancelPending
{

	[self cancelPending_OnlyReplayPending:NO:self];
}

- (void)cancelReplayPending:(SUPAbstractEntity*)entity
{

	[self cancelPending_OnlyReplayPending:YES:entity];
}

- (void)cancelPending_OnlyReplayPending:(BOOL)onlyReplayPending:(SUPAbstractEntity*)entity
{
    id<SUPConnectionWrapper> connection = nil;
    @try
    {
        [[RHM_Comercial_RHM_ComercialDB dblock] writeLock];
        connection = [RHM_Comercial_RHM_ComercialDB getConnectionWrapper];
        SUPLocalTransaction* transaction = ([connection inTransaction] ? nil : [RHM_Comercial_RHM_ComercialDB beginTransaction]);
		@try {
    		if (self.pending && (!onlyReplayPending || (self.replayCounter <= entity.replayCounter)))
    		{
        		//BOOL isDeleted = self.isDeleted;
				[self deletePending:YES];
     		}
        	if (transaction != nil)
        	{
            	[transaction commit];
        	}
    	}
    	@catch (NSException* e)
    	{
        	if (transaction != nil)
        	{
            	[transaction rollback];
        	}
        	@throw e;
    	}
    }
    @catch (SUPPersistenceException *spe)
    {
        MBOLogPersistenceException(SUPCLIENTRT_PERSISTENCEEXCEPTIONMSG,@"cancelPending",[spe message]);
    }
    @finally
    {
        [connection releaseToPool];
        [[RHM_Comercial_RHM_ComercialDB dblock] unlock];
    } 
}

- (void)create
{
    @throw [SUPNoSuchOperationException getInstance];
}

- (void)delete
{
    @throw [SUPNoSuchOperationException getInstance];
}

- (RHM_Comercial_RHM_ComercialDB*)database
{
   return [RHM_Comercial_RHM_ComercialDB instance];
}

+ (RHM_Comercial_TS_CLI_DEST*)find_by_id_string:(NSString*)id_string
{
    if(id_string == nil) return nil;
	int64_t key;
	NSNumberFormatter *nf = [[[NSNumberFormatter alloc] init] autorelease];
	key = [[nf numberFromString:id_string] longValue];
    return [RHM_Comercial_TS_CLI_DEST find:key];
	
}

+ (RHM_Comercial_TS_CLI_DEST*)find:(int64_t)id
{
	return [self find:id inTable:MainEntityTable];
}

+ (RHM_Comercial_TS_CLI_DEST*)find:(int64_t)id_ inTable:(SUPEntityTable)table
{
    RHM_Comercial_TS_CLI_DEST* result = nil;
	RHM_Comercial_TS_CLI_DEST* downloadState = nil;
    id<SUPStatementWrapper> preparedStatement = nil;
    id<SUPConnectionWrapper> connection = nil;
    @try
    {
        [[RHM_Comercial_RHM_ComercialDB dblock] readLock];
    
    	connection = [RHM_Comercial_RHM_ComercialDB getConnectionWrapper];
    	//@synchronized(connection)
    	{
        	@try
        	{
            	if (table == MainEntityTable)
            	{
                	preparedStatement = [connection prepareStatement:@"select \"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"_pf\",\"_pc\",\"_rp\",\"_rf\",\"h\",\"_rc\",\"_ds\" from rhm_comercial_1_0_ts_cli_dest where \"h\"=? order by \"_pf\""];
            	}
            	else
            	{
                	preparedStatement = [connection prepareStatement:@"select \"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"_pf\",\"_pc\",\"_rp\",\"_rf\",\"h\",\"_rc\",\"_ds\" from rhm_comercial_1_0_ts_cli_dest_os where \"h\"=? order by \"_pf\""];
            	}
            	[preparedStatement setLong:1:@"surrogateKey":id_];
            	id<SUPResultSetWrapper> resultSet = [preparedStatement executeQuery];
            	while ([resultSet next])
            	{
            		if(result) [result release];
                	result = [[RHM_Comercial_TS_CLI_DEST alloc] init];
                	[result bind:resultSet];
                	if (table == OriginalStateEntityTable)
                	{
                    	result->_pending = false;
                    	result->_pendingChange = NotPending;
                	}
                	if (result.pending)
                	{
                    	break;
                	}
                	else
                	{
 	              		downloadState = [RHM_Comercial_TS_CLI_DEST getInstance];
                		[downloadState copyAll:result];
                	}
            	}
            	[resultSet close];      
        	}
        	@catch (SUPPersistenceException *spe)
        	{
            	@throw spe;
        	}
    	}
    }
    @catch (SUPPersistenceException *spe)
    {
        MBOLogPersistenceException(SUPCLIENTRT_TEMPLATE_PERSISTENCEEXCEPTIONMSG,@"find",[spe message]);
    }
    @finally
    {
    	if(preparedStatement) [preparedStatement close];
        [connection releaseToPool];
        [[RHM_Comercial_RHM_ComercialDB dblock] unlock];
    }
    if(result)
    {
    	if(result.pending)
    		result.downloadState = (SUPAbstractEntity*)downloadState;
  		//if(result != downloadState)
  		//	[downloadState release];
    }
    [result autorelease];
    return result;
}

+ (id<SUPSynchronizationGroup>)getSynchronizationGroup
{
	return [RHM_Comercial_RHM_ComercialDB getSyncGroupForName:@"default"];
}

+ (SUPObjectList*)findWithQuery:(SUPQuery*)query
{
    id<SUPConnectionWrapper> connection = nil;
	if(query.selectItems != nil)
	{
		if(query.entityAlias == nil)
		{
			SUPEntityAlias *ea = [SUPEntityAlias getInstance];
			ea.alias = [[query.selectItems item:0] alias];
			ea.entity = @"TS_CLI_DEST";
			query.entityAlias = ea;
		}
		BOOL surrogateKeyFound = NO;
		for(SUPSelectItem *si in query.selectItems)
		{
			if([si.attribute compare:@"surrogateKey"] == 0)
				surrogateKeyFound = YES;
		}
		if(!surrogateKeyFound)
		{
			SUPSelectItem *si = [SUPSelectItem getInstance];
			si.attribute = @"surrogateKey";
			si.alias = [query.entityAlias alias];
			[query.selectItems add:si];
		}
	}
id<SUPStatementWrapper> statement = nil;
id<SUPResultSetWrapper> resultSet = nil;
    {
        @try
        {    
            [[RHM_Comercial_RHM_ComercialDB dblock] readLock];
            connection = [RHM_Comercial_RHM_ComercialDB getConnectionWrapper];
            int32_t count = 0;
            RHM_Comercial_TS_CLI_DESTList* list = [[RHM_Comercial_TS_CLI_DESTList alloc] init];

            statement = [SUPStatementBuilder prepareQuery:connection:[RHM_Comercial_RHM_ComercialDB metaData]:[RHM_Comercial_TS_CLI_DEST metaData]:query];
            resultSet = [statement executeQuery];
            while ([resultSet next])
            {
                count++;   
                RHM_Comercial_TS_CLI_DEST* entity = [[RHM_Comercial_TS_CLI_DEST alloc] init];
                [entity bindWithQuery:resultSet:query];
                [list add:entity];
                [entity release];
            }
            [list autorelease];
            return list;
        }
        @catch (NSException *e)
        {
                    MBOLogPersistenceException(SUPCLIENTRT_PERSISTENCEEXCEPTIONMSG, @"findWithQuery",[NSString stringWithFormat:@"%@: %@",[e name],[e reason]]);
        }
        @finally
        {
            if(resultSet) [resultSet close];
            if(statement) [statement close];
            [connection releaseToPool];
            [[RHM_Comercial_RHM_ComercialDB dblock] unlock];
        }
    }
    return nil;
}


- (id<SUPStatementWrapper>)getCreateStatement:(id<SUPConnectionWrapper>)connection forTable:(SUPEntityTable)table;
{
    id<SUPStatementWrapper> preparedStatement;
    if (table == MainEntityTable)
    {
        preparedStatement = [connection prepareStatement:@"insert into rhm_comercial_1_0_ts_cli_dest (\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"_pf\",\"_pc\",\"_rp\",\"_rf\",\"h\",\"_rc\",\"_ds\") values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)"];
    }
    else
    {
        preparedStatement = [connection prepareStatement:@"insert into rhm_comercial_1_0_ts_cli_dest_os (\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"_pf\",\"_pc\",\"_rp\",\"_rf\",\"h\",\"_rc\",\"_ds\") values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)"];
    }
    // Add updated values
	if(self.BUKRS == nil)
		self.BUKRS = @"";
		//RHM_Comercial_TS_CLI_DEST getCreateStatement:BUKRS not allowed to be null
    [preparedStatement setString:1:@"a":self.BUKRS];
	if(self.KUNNR == nil)
		self.KUNNR = @"";
		//RHM_Comercial_TS_CLI_DEST getCreateStatement:KUNNR not allowed to be null
    [preparedStatement setString:2:@"b":self.KUNNR];
	if(self.VKORG == nil)
		self.VKORG = @"";
		//RHM_Comercial_TS_CLI_DEST getCreateStatement:VKORG not allowed to be null
    [preparedStatement setString:3:@"c":self.VKORG];
	if(self.VTWEG == nil)
		self.VTWEG = @"";
		//RHM_Comercial_TS_CLI_DEST getCreateStatement:VTWEG not allowed to be null
    [preparedStatement setString:4:@"d":self.VTWEG];
	if(self.SPART == nil)
		self.SPART = @"";
		//RHM_Comercial_TS_CLI_DEST getCreateStatement:SPART not allowed to be null
    [preparedStatement setString:5:@"e":self.SPART];
	if(self.DESTIN == nil)
		self.DESTIN = @"";
		//RHM_Comercial_TS_CLI_DEST getCreateStatement:DESTIN not allowed to be null
    [preparedStatement setString:6:@"f":self.DESTIN];
	if(self.DEFECTO == nil)
		self.DEFECTO = @"";
		//RHM_Comercial_TS_CLI_DEST getCreateStatement:DEFECTO not allowed to be null
    [preparedStatement setString:7:@"g":self.DEFECTO];
    [preparedStatement setBoolean:8:@"_pf":((table == MainEntityTable) ? self->_pending : NO)];    		
    [preparedStatement setChar:9:@"_pc":((table == MainEntityTable) ? self->_pendingChange : 'N')];    		
    [preparedStatement setLong:10:@"_rp":((table == MainEntityTable) ? self->_replayPending : 0)];    		
    [preparedStatement setLong:11:@"_rf":((table == MainEntityTable) ? self->_replayFailure : 0)];    		
    [preparedStatement setLong:12:@"h":self.surrogateKey];
    [preparedStatement setLong:13:@"_rc":((table == MainEntityTable) ? self.replayCounter : 0)];
    [preparedStatement setBoolean:14:@"_ds":self.disableSubmit];
	return preparedStatement;
}

- (id<SUPStatementWrapper>)getDeleteStatement:(id<SUPConnectionWrapper>)connection forTable:(SUPEntityTable)table;
{
    id<SUPStatementWrapper> preparedStatement;
    if (table == MainEntityTable)
    {
        preparedStatement = [connection prepareStatement:@"delete from rhm_comercial_1_0_ts_cli_dest where \"_pf\"=? and \"h\"=?"];
    }
    else
    {
        preparedStatement = [connection prepareStatement:@"delete from rhm_comercial_1_0_ts_cli_dest_os where \"_pf\"=? and \"h\"=?"];
    }
    // Fill in values for "where" clause
    [preparedStatement setBoolean:1:@"_pf":self->_pending];    		
    [preparedStatement setLong:2:@"h":self.surrogateKey];
	return preparedStatement;
}

- (id<SUPStatementWrapper>)getUpdateStatement:(id<SUPConnectionWrapper>)connection forTable:(SUPEntityTable)table;
{
    id<SUPStatementWrapper> preparedStatement;
    if (table == MainEntityTable)
    {
    	preparedStatement = [connection prepareStatement:@"update rhm_comercial_1_0_ts_cli_dest set \"a\"=?,\"b\"=?,\"c\"=?,\"d\"=?,\"e\"=?,\"f\"=?,\"g\"=?,\"_pc\"=?,\"_rp\"=?,\"_rf\"=?,\"_rc\"=?,\"_ds\"=? where \"_pf\"=? and \"h\"=?"];
    }
    else
    {
        preparedStatement = [connection prepareStatement:@"update rhm_comercial_1_0_ts_cli_dest_os set \"a\"=?,\"b\"=?,\"c\"=?,\"d\"=?,\"e\"=?,\"f\"=?,\"g\"=?,\"_pc\"=?,\"_rp\"=?,\"_rf\"=?,\"_rc\"=?,\"_ds\"=? where \"_pf\"=? and \"h\"=?"];
    }
    // Add updated values
    int parameterIndex = 0;
	if(self.BUKRS == nil)
		self.BUKRS = @"";
		//RHM_Comercial_TS_CLI_DEST getUpdateStatement:BUKRS not allowed to be null
    parameterIndex++;
    [preparedStatement setString:parameterIndex:@"a":self.BUKRS];
	if(self.KUNNR == nil)
		self.KUNNR = @"";
		//RHM_Comercial_TS_CLI_DEST getUpdateStatement:KUNNR not allowed to be null
    parameterIndex++;
    [preparedStatement setString:parameterIndex:@"b":self.KUNNR];
	if(self.VKORG == nil)
		self.VKORG = @"";
		//RHM_Comercial_TS_CLI_DEST getUpdateStatement:VKORG not allowed to be null
    parameterIndex++;
    [preparedStatement setString:parameterIndex:@"c":self.VKORG];
	if(self.VTWEG == nil)
		self.VTWEG = @"";
		//RHM_Comercial_TS_CLI_DEST getUpdateStatement:VTWEG not allowed to be null
    parameterIndex++;
    [preparedStatement setString:parameterIndex:@"d":self.VTWEG];
	if(self.SPART == nil)
		self.SPART = @"";
		//RHM_Comercial_TS_CLI_DEST getUpdateStatement:SPART not allowed to be null
    parameterIndex++;
    [preparedStatement setString:parameterIndex:@"e":self.SPART];
	if(self.DESTIN == nil)
		self.DESTIN = @"";
		//RHM_Comercial_TS_CLI_DEST getUpdateStatement:DESTIN not allowed to be null
    parameterIndex++;
    [preparedStatement setString:parameterIndex:@"f":self.DESTIN];
	if(self.DEFECTO == nil)
		self.DEFECTO = @"";
		//RHM_Comercial_TS_CLI_DEST getUpdateStatement:DEFECTO not allowed to be null
    parameterIndex++;
    [preparedStatement setString:parameterIndex:@"g":self.DEFECTO];
    parameterIndex++;
    [preparedStatement setChar:parameterIndex:@"_pc":self->_pendingChange];
    parameterIndex++;
    [preparedStatement setLong:parameterIndex:@"_rp":self->_replayPending];
    parameterIndex++;
    [preparedStatement setLong:parameterIndex:@"_rf":self->_replayFailure];
    parameterIndex++;
    [preparedStatement setLong:parameterIndex:@"_rc":self.replayCounter];
    parameterIndex++;
    [preparedStatement setBoolean:parameterIndex:@"_ds":self.disableSubmit];
    // Fill in values for "where" clause
    parameterIndex++;
    [preparedStatement setBoolean:parameterIndex:@"_pf":self->_pending];
    parameterIndex++;
    [preparedStatement setLong:parameterIndex:@"h":self.surrogateKey];
	return preparedStatement;
}

- (int64_t)_pk
{
	return [self id];
}

- (int64_t)id
{
    return self.surrogateKey;
}

- (NSString*)keyToString
{
	return [NSString stringWithFormat:@"%d",[self id]];
}

+ (void)importData:(RHM_Comercial_TS_CLI_DEST*)serverEntity:(SUPJsonObject*)jsonObject
{
	NSAutoreleasePool *importDataPool = [[NSAutoreleasePool alloc] init];
	RHM_Comercial_TS_CLI_DEST* serverEntity2 = [RHM_Comercial_TS_CLI_DEST getInstance];
    [serverEntity2 copyAll:serverEntity];
    
    if([serverEntity2 database].callbackHandler)
		[[serverEntity2 database].callbackHandler beforeImport:serverEntity2];
    if([RHM_Comercial_TS_CLI_DEST callbackHandler])
		[[RHM_Comercial_TS_CLI_DEST callbackHandler] beforeImport:serverEntity2];
	
    [serverEntity retain];
    SUPBoolean upsert = !(serverEntity.isDeleted)  && (!serverEntity.isNew) && (!serverEntity.isDirty);
    SUPBoolean create = serverEntity.isNew;
    SUPBoolean update = serverEntity.isDirty;
    SUPBoolean delete = serverEntity.isDeleted;
    
    serverEntity->_pendingChange = NotPending;
    serverEntity.replayPending = 0;
    if(upsert || create)
    {
    	@try
    	{
    		[serverEntity createPending:NO];
    	}
    	@catch(NSException *e)
    	{
    		serverEntity.isDirty = YES;
    		update = YES;
    	}
    } else if(delete)
    {
    	BOOL isCreated = NO;
    	@try
    	{
    		// check to see if server is trying to delete a newly created row
    		[serverEntity createPending:NO];
    		isCreated = YES;
    	}
    	@catch(NSException *e)
    	{
    	}
        [serverEntity deletePending:NO];
        serverEntity->_isDeleted = YES;
        serverEntity.pending = YES;
        serverEntity.pendingChange = PendingDelete;
        if(isCreated) 
        {
            RHM_Comercial_TS_CLI_DEST *clientEntity = [RHM_Comercial_TS_CLI_DEST find:[serverEntity _pk]];
            if(clientEntity != nil && clientEntity.pending)
            {
				[serverEntity refresh];
				serverEntity->_isDeleted = YES;
				serverEntity.replayCounter = 0;
				serverEntity.replayFailure = serverEntity.replayCounter;
            }
			serverEntity->_isNew = YES;
        }
    } 
	if(update)
    {
    	RHM_Comercial_TS_CLI_DEST *clientEntity = [RHM_Comercial_TS_CLI_DEST find:[serverEntity _pk]];
    	if(clientEntity.pending)
    		clientEntity = (RHM_Comercial_TS_CLI_DEST*)clientEntity.downloadState;
        @try 
        {
            [serverEntity merge:clientEntity withJson:jsonObject];
        } @catch(SUPJsonException *je)
        {
            NSException *e = [[NSException alloc] initWithName:@"SUPJsonException" reason:[je message] userInfo:nil];
            @throw e;
        }
        serverEntity.pending = NO;
        [serverEntity updatePending:NO];
        serverEntity.isDirty = YES;
        serverEntity.pending = YES;
        serverEntity.pendingChange = PendingUpdate;
    }
    if(create)
    {
        serverEntity->_isNew = YES;
        serverEntity.pending = YES;
        serverEntity.pendingChange = PendingCreate;
    }
    if([serverEntity database].callbackHandler)
		[[serverEntity database].callbackHandler onImport:serverEntity];
    if([RHM_Comercial_TS_CLI_DEST callbackHandler])
		[[RHM_Comercial_TS_CLI_DEST callbackHandler] onImport:serverEntity];

    [serverEntity release];
   
#ifdef LOGRECORD_ON_IMPORT
	[serverEntity createLogRecord:[SUPLogLevel info] withMessage:@"data import"];
#endif
	[importDataPool drain];
}

+ (RHM_Comercial_TS_CLI_DEST*)load:(int64_t)id
{
	RHM_Comercial_TS_CLI_DEST* entity = [self find:id inTable:MainEntityTable];
	//RHM_Comercial_TS_CLI_DEST* entity = [self find:id];
    if (entity == nil)
    {
		@throw [SUPObjectNotFoundException withMessage:@"-load: in RHM_Comercial_TS_CLI_DEST: entity not found in database"];
    }
    return entity;
}

static SUPEntityMetaData* RHM_Comercial_TS_CLI_DEST_META_DATA;
static BOOL _valid_ = NO;

+ (SUPEntityMetaData*)metaData
{
    if (! (_valid_))
    {
       RHM_Comercial_TS_CLI_DEST_META_DATA = [SUPEntityMetaData getInstance];
       RHM_Comercial_TS_CLI_DEST_META_DATA.id = _ENTITY_NUMBER_FOR_RHM_Comercial_TS_CLI_DEST_;
       RHM_Comercial_TS_CLI_DEST_META_DATA.name = @"TS_CLI_DEST";
       [RHM_Comercial_TS_CLI_DEST_META_DATA setClass:[RHM_Comercial_TS_CLI_DEST class]];

	   RHM_Comercial_TS_CLI_DEST_META_DATA.isClientOnly = NO;

       // Handle attributes
       
       	SUPObjectList *attributes = [SUPObjectList getInstance];
		SUPAttributeMetaData_DC* a_BUKRS = [RHM_Comercial_RHM_ComercialDB createAttributeMetaData:1:(SUPString)@"BUKRS":[SUPDataType forName:@"string"]];
		[a_BUKRS setColumn:@"\"a\""];
		[a_BUKRS setMaxLength:4];
		[a_BUKRS setPrecision:0];
		[a_BUKRS setScale:0];
		[a_BUKRS setIsKey:NO];
		SUPAttributeMetaData_DC* a_KUNNR = [RHM_Comercial_RHM_ComercialDB createAttributeMetaData:2:(SUPString)@"KUNNR":[SUPDataType forName:@"string"]];
		[a_KUNNR setColumn:@"\"b\""];
		[a_KUNNR setMaxLength:10];
		[a_KUNNR setPrecision:0];
		[a_KUNNR setScale:0];
		[a_KUNNR setIsKey:NO];
		SUPAttributeMetaData_DC* a_VKORG = [RHM_Comercial_RHM_ComercialDB createAttributeMetaData:3:(SUPString)@"VKORG":[SUPDataType forName:@"string"]];
		[a_VKORG setColumn:@"\"c\""];
		[a_VKORG setMaxLength:4];
		[a_VKORG setPrecision:0];
		[a_VKORG setScale:0];
		[a_VKORG setIsKey:NO];
		SUPAttributeMetaData_DC* a_VTWEG = [RHM_Comercial_RHM_ComercialDB createAttributeMetaData:4:(SUPString)@"VTWEG":[SUPDataType forName:@"string"]];
		[a_VTWEG setColumn:@"\"d\""];
		[a_VTWEG setMaxLength:2];
		[a_VTWEG setPrecision:0];
		[a_VTWEG setScale:0];
		[a_VTWEG setIsKey:NO];
		SUPAttributeMetaData_DC* a_SPART = [RHM_Comercial_RHM_ComercialDB createAttributeMetaData:5:(SUPString)@"SPART":[SUPDataType forName:@"string"]];
		[a_SPART setColumn:@"\"e\""];
		[a_SPART setMaxLength:2];
		[a_SPART setPrecision:0];
		[a_SPART setScale:0];
		[a_SPART setIsKey:NO];
		SUPAttributeMetaData_DC* a_DESTIN = [RHM_Comercial_RHM_ComercialDB createAttributeMetaData:6:(SUPString)@"DESTIN":[SUPDataType forName:@"string"]];
		[a_DESTIN setColumn:@"\"f\""];
		[a_DESTIN setMaxLength:10];
		[a_DESTIN setPrecision:0];
		[a_DESTIN setScale:0];
		[a_DESTIN setIsKey:NO];
		SUPAttributeMetaData_DC* a_DEFECTO = [RHM_Comercial_RHM_ComercialDB createAttributeMetaData:7:(SUPString)@"DEFECTO":[SUPDataType forName:@"string"]];
		[a_DEFECTO setColumn:@"\"g\""];
		[a_DEFECTO setMaxLength:1];
		[a_DEFECTO setPrecision:0];
		[a_DEFECTO setScale:0];
		[a_DEFECTO setIsKey:NO];
		SUPAttributeMetaData_DC* a_pending = [RHM_Comercial_RHM_ComercialDB createAttributeMetaData:8:(SUPString)@"pending":[SUPDataType forName:@"boolean"]];
		[a_pending setColumn:@"\"_pf\""];
		[a_pending setMaxLength:-1];
		[a_pending setPrecision:0];
		[a_pending setScale:0];
		[a_pending setIsKey:NO];
		SUPAttributeMetaData_DC* a_pendingChange = [RHM_Comercial_RHM_ComercialDB createAttributeMetaData:9:(SUPString)@"pendingChange":[SUPDataType forName:@"char"]];
		[a_pendingChange setColumn:@"\"_pc\""];
		[a_pendingChange setMaxLength:1];
		[a_pendingChange setPrecision:0];
		[a_pendingChange setScale:0];
		[a_pendingChange setIsKey:NO];
		SUPAttributeMetaData_DC* a_replayPending = [RHM_Comercial_RHM_ComercialDB createAttributeMetaData:10:(SUPString)@"replayPending":[SUPDataType forName:@"long"]];
		[a_replayPending setColumn:@"\"_rp\""];
		[a_replayPending setMaxLength:-1];
		[a_replayPending setPrecision:0];
		[a_replayPending setScale:0];
		[a_replayPending setIsKey:NO];
		SUPAttributeMetaData_DC* a_replayFailure = [RHM_Comercial_RHM_ComercialDB createAttributeMetaData:11:(SUPString)@"replayFailure":[SUPDataType forName:@"long"]];
		[a_replayFailure setColumn:@"\"_rf\""];
		[a_replayFailure setMaxLength:-1];
		[a_replayFailure setPrecision:0];
		[a_replayFailure setScale:0];
		[a_replayFailure setIsKey:NO];
		SUPAttributeMetaData_DC* a_surrogateKey = [RHM_Comercial_RHM_ComercialDB createAttributeMetaData:12:(SUPString)@"surrogateKey":[SUPDataType forName:@"long"]];
		[a_surrogateKey setColumn:@"\"h\""];
		[a_surrogateKey setMaxLength:-1];
		[a_surrogateKey setPrecision:0];
		[a_surrogateKey setScale:0];
		[a_surrogateKey setIsKey:YES];
		SUPAttributeMetaData_DC* a_replayCounter = [RHM_Comercial_RHM_ComercialDB createAttributeMetaData:13:(SUPString)@"replayCounter":[SUPDataType forName:@"long"]];
		[a_replayCounter setColumn:@"\"_rc\""];
		[a_replayCounter setMaxLength:-1];
		[a_replayCounter setPrecision:0];
		[a_replayCounter setScale:0];
		[a_replayCounter setIsKey:NO];
		SUPAttributeMetaData_DC* a_disableSubmit = [RHM_Comercial_RHM_ComercialDB createAttributeMetaData:14:(SUPString)@"disableSubmit":[SUPDataType forName:@"boolean"]];
		[a_disableSubmit setColumn:@"\"_ds\""];
		[a_disableSubmit setMaxLength:-1];
		[a_disableSubmit setPrecision:0];
		[a_disableSubmit setScale:0];
		[a_disableSubmit setIsKey:NO];
 		
 		[attributes addThis:a_BUKRS];
 		[attributes addThis:a_KUNNR];
 		[attributes addThis:a_VKORG];
 		[attributes addThis:a_VTWEG];
 		[attributes addThis:a_SPART];
 		[attributes addThis:a_DESTIN];
 		[attributes addThis:a_DEFECTO];
 		[attributes addThis:a_pending];
 		[attributes addThis:a_pendingChange];
 		[attributes addThis:a_replayPending];
 		[attributes addThis:a_replayFailure];
 		[attributes addThis:a_surrogateKey];
 		[attributes addThis:a_replayCounter];
 		[attributes addThis:a_disableSubmit];
 		RHM_Comercial_TS_CLI_DEST_META_DATA.attributes = attributes;
 		
 		SUPAttributeMap * attributeMap = [SUPAttributeMap getInstance];
    	[attributeMap setAttributes:attributes];
    	RHM_Comercial_TS_CLI_DEST_META_DATA.attributeMap = [attributeMap finishInit];
 
 		// Handle operations
 		SUPOperationMetaData* o_findAll_0 = [RHM_Comercial_RHM_ComercialDB createOperationMetaData:1:(SUPString)@"findAll":[SUPDataType forName:@"TS_CLI_DEST*"]:true];
		[o_findAll_0 setIsStatic:YES];
		[o_findAll_0 setIsCreate:NO];
		[o_findAll_0 setIsUpdate:NO];
		[o_findAll_0 setIsDelete:NO]; 		
 		[o_findAll_0 finishInit];
 		SUPOperationMetaData* o_getPendingObjects_0 = [RHM_Comercial_RHM_ComercialDB createOperationMetaData:2:(SUPString)@"getPendingObjects":[SUPDataType forName:@"TS_CLI_DEST*"]:true];
		[o_getPendingObjects_0 setIsStatic:YES];
		[o_getPendingObjects_0 setIsCreate:NO];
		[o_getPendingObjects_0 setIsUpdate:NO];
		[o_getPendingObjects_0 setIsDelete:NO]; 		
 		[o_getPendingObjects_0 finishInit];
 		SUPOperationMetaData* o_getPendingObjects_1 = [RHM_Comercial_RHM_ComercialDB createOperationMetaData:3:(SUPString)@"getPendingObjects":[SUPDataType forName:@"TS_CLI_DEST*"]:true];
  		{
 			SUPObjectList *parameters_list = nil;
 			SUPParameterMetaData* p_getPendingObjects_pendingChange = [RHM_Comercial_RHM_ComercialDB createParameterMetaData:1:(SUPString)@"pendingChange":[SUPDataType forName:@"char"]];
 			parameters_list = [SUPObjectList listWithCapacity:1];
 			[parameters_list addThis:p_getPendingObjects_pendingChange];
 			o_getPendingObjects_1.parameters = parameters_list;

 		}
		[o_getPendingObjects_1 setIsStatic:YES];
		[o_getPendingObjects_1 setIsCreate:NO];
		[o_getPendingObjects_1 setIsUpdate:NO];
		[o_getPendingObjects_1 setIsDelete:NO]; 		
 		[o_getPendingObjects_1 finishInit];
 		SUPOperationMetaData* o_getReplayPendingObjects_0 = [RHM_Comercial_RHM_ComercialDB createOperationMetaData:4:(SUPString)@"getReplayPendingObjects":[SUPDataType forName:@"TS_CLI_DEST*"]:true];
		[o_getReplayPendingObjects_0 setIsStatic:YES];
		[o_getReplayPendingObjects_0 setIsCreate:NO];
		[o_getReplayPendingObjects_0 setIsUpdate:NO];
		[o_getReplayPendingObjects_0 setIsDelete:NO]; 		
 		[o_getReplayPendingObjects_0 finishInit];
 		SUPOperationMetaData* o_refresh_0 = [RHM_Comercial_RHM_ComercialDB createOperationMetaData:5:(SUPString)@"refresh":[SUPDataType forName:@"void"]:true];
		[o_refresh_0 setIsStatic:NO];
		[o_refresh_0 setIsCreate:NO];
		[o_refresh_0 setIsUpdate:NO];
		[o_refresh_0 setIsDelete:NO]; 		
 		[o_refresh_0 finishInit];
 		SUPOperationMetaData* o__pk_0 = [RHM_Comercial_RHM_ComercialDB createOperationMetaData:6:(SUPString)@"_pk":[SUPDataType forName:@"long?"]:true];
		[o__pk_0 setIsStatic:NO];
		[o__pk_0 setIsCreate:NO];
		[o__pk_0 setIsUpdate:NO];
		[o__pk_0 setIsDelete:NO]; 		
 		[o__pk_0 finishInit];
 		SUPOperationMetaData* o_submitPending_0 = [RHM_Comercial_RHM_ComercialDB createOperationMetaData:7:(SUPString)@"submitPending":[SUPDataType forName:@"void"]:true];
		[o_submitPending_0 setIsStatic:NO];
		[o_submitPending_0 setIsCreate:NO];
		[o_submitPending_0 setIsUpdate:NO];
		[o_submitPending_0 setIsDelete:NO]; 		
 		[o_submitPending_0 finishInit];
 		SUPOperationMetaData* o_cancelPending_0 = [RHM_Comercial_RHM_ComercialDB createOperationMetaData:8:(SUPString)@"cancelPending":[SUPDataType forName:@"void"]:true];
		[o_cancelPending_0 setIsStatic:NO];
		[o_cancelPending_0 setIsCreate:NO];
		[o_cancelPending_0 setIsUpdate:NO];
		[o_cancelPending_0 setIsDelete:NO]; 		
 		[o_cancelPending_0 finishInit];
 		SUPOperationMetaData* o_submitPendingOperations_0 = [RHM_Comercial_RHM_ComercialDB createOperationMetaData:9:(SUPString)@"submitPendingOperations":[SUPDataType forName:@"void"]:true];
		[o_submitPendingOperations_0 setIsStatic:YES];
		[o_submitPendingOperations_0 setIsCreate:NO];
		[o_submitPendingOperations_0 setIsUpdate:NO];
		[o_submitPendingOperations_0 setIsDelete:NO]; 		
 		[o_submitPendingOperations_0 finishInit];
 		SUPOperationMetaData* o_cancelPendingOperations_0 = [RHM_Comercial_RHM_ComercialDB createOperationMetaData:10:(SUPString)@"cancelPendingOperations":[SUPDataType forName:@"void"]:true];
		[o_cancelPendingOperations_0 setIsStatic:YES];
		[o_cancelPendingOperations_0 setIsCreate:NO];
		[o_cancelPendingOperations_0 setIsUpdate:NO];
		[o_cancelPendingOperations_0 setIsDelete:NO]; 		
 		[o_cancelPendingOperations_0 finishInit];
 		SUPOperationMetaData* o_save_0 = [RHM_Comercial_RHM_ComercialDB createOperationMetaData:11:(SUPString)@"save":[SUPDataType forName:@"void"]:true];
		[o_save_0 setIsStatic:NO];
		[o_save_0 setIsCreate:NO];
		[o_save_0 setIsUpdate:NO];
		[o_save_0 setIsDelete:NO]; 		
 		[o_save_0 finishInit];
 		SUPOperationMetaData* o_findWithQuery_1 = [RHM_Comercial_RHM_ComercialDB createOperationMetaData:12:(SUPString)@"findWithQuery":[SUPDataType forName:@"TS_CLI_DEST*"]:true];
  		{
 			SUPObjectList *parameters_list = nil;
 			SUPParameterMetaData* p_findWithQuery_query = [RHM_Comercial_RHM_ComercialDB createParameterMetaData:1:(SUPString)@"query":[SUPDataType forName:@"com.sybase.persistence.Query"]];
 			parameters_list = [SUPObjectList listWithCapacity:1];
 			[parameters_list addThis:p_findWithQuery_query];
 			o_findWithQuery_1.parameters = parameters_list;

 		}
		[o_findWithQuery_1 setIsStatic:YES];
		[o_findWithQuery_1 setIsCreate:NO];
		[o_findWithQuery_1 setIsUpdate:NO];
		[o_findWithQuery_1 setIsDelete:NO]; 		
 		[o_findWithQuery_1 finishInit];
 		SUPOperationMetaData* o_getSize_1 = [RHM_Comercial_RHM_ComercialDB createOperationMetaData:13:(SUPString)@"getSize":[SUPDataType forName:@"int"]:true];
  		{
 			SUPObjectList *parameters_list = nil;
 			SUPParameterMetaData* p_getSize_query = [RHM_Comercial_RHM_ComercialDB createParameterMetaData:1:(SUPString)@"query":[SUPDataType forName:@"com.sybase.persistence.Query"]];
 			parameters_list = [SUPObjectList listWithCapacity:1];
 			[parameters_list addThis:p_getSize_query];
 			o_getSize_1.parameters = parameters_list;

 		}
		[o_getSize_1 setIsStatic:YES];
		[o_getSize_1 setIsCreate:NO];
		[o_getSize_1 setIsUpdate:NO];
		[o_getSize_1 setIsDelete:NO]; 		
 		[o_getSize_1 finishInit];
 		SUPOperationMetaData* o_countReplayPendingObjects_0 = [RHM_Comercial_RHM_ComercialDB createOperationMetaData:14:(SUPString)@"countReplayPendingObjects":[SUPDataType forName:@"int"]:true];
		[o_countReplayPendingObjects_0 setIsStatic:YES];
		[o_countReplayPendingObjects_0 setIsCreate:NO];
		[o_countReplayPendingObjects_0 setIsUpdate:NO];
		[o_countReplayPendingObjects_0 setIsDelete:NO]; 		
 		[o_countReplayPendingObjects_0 finishInit];
 
  		SUPObjectList *operations = [SUPObjectList listWithCapacity:14];
 		[operations addThis:o_findAll_0];
 		[operations addThis:o_getPendingObjects_0];
 		[operations addThis:o_getPendingObjects_1];
 		[operations addThis:o_getReplayPendingObjects_0];
 		[operations addThis:o_refresh_0];
 		[operations addThis:o__pk_0];
 		[operations addThis:o_submitPending_0];
 		[operations addThis:o_cancelPending_0];
 		[operations addThis:o_submitPendingOperations_0];
 		[operations addThis:o_cancelPendingOperations_0];
 		[operations addThis:o_save_0];
 		[operations addThis:o_findWithQuery_1];
 		[operations addThis:o_getSize_1];
 		[operations addThis:o_countReplayPendingObjects_0];
 		RHM_Comercial_TS_CLI_DEST_META_DATA.operations = operations;
 		
		SUPOperationMap *operationMap = [SUPOperationMap getInstance];
		[operationMap setOperations:operations];
		RHM_Comercial_TS_CLI_DEST_META_DATA.operationMap = [operationMap finishInit];
		
		RHM_Comercial_TS_CLI_DEST_META_DATA.table = @"\"rhm_comercial_1_0_ts_cli_dest\"";

 		[RHM_Comercial_TS_CLI_DEST_META_DATA retain];
     	_valid_ = YES;

	}
	return RHM_Comercial_TS_CLI_DEST_META_DATA;
}

- (void)merge:(RHM_Comercial_TS_CLI_DEST*)entity withJson:(SUPJsonObject*)json
{
	[super merge:entity withJson:json];
    if(![json containsKey:@"BUKRS"] )
    {
    	self.BUKRS = entity.BUKRS;
    }
    else if(![json getString:@"BUKRS"])
    {
    	self.BUKRS = entity.BUKRS;
    }
    if(![json containsKey:@"KUNNR"] )
    {
    	self.KUNNR = entity.KUNNR;
    }
    else if(![json getString:@"KUNNR"])
    {
    	self.KUNNR = entity.KUNNR;
    }
    if(![json containsKey:@"VKORG"] )
    {
    	self.VKORG = entity.VKORG;
    }
    else if(![json getString:@"VKORG"])
    {
    	self.VKORG = entity.VKORG;
    }
    if(![json containsKey:@"VTWEG"] )
    {
    	self.VTWEG = entity.VTWEG;
    }
    else if(![json getString:@"VTWEG"])
    {
    	self.VTWEG = entity.VTWEG;
    }
    if(![json containsKey:@"SPART"] )
    {
    	self.SPART = entity.SPART;
    }
    else if(![json getString:@"SPART"])
    {
    	self.SPART = entity.SPART;
    }
    if(![json containsKey:@"DESTIN"] )
    {
    	self.DESTIN = entity.DESTIN;
    }
    else if(![json getString:@"DESTIN"])
    {
    	self.DESTIN = entity.DESTIN;
    }
    if(![json containsKey:@"DEFECTO"] )
    {
    	self.DEFECTO = entity.DEFECTO;
    }
    else if(![json getString:@"DEFECTO"])
    {
    	self.DEFECTO = entity.DEFECTO;
    }
    if(![json containsKey:@"surrogateKey"] )
    {
    	self.surrogateKey = entity.surrogateKey;
    }
    else if(![json getLong:@"surrogateKey"])
    {
    	self.surrogateKey = entity.surrogateKey;
    }
    if(![json containsKey:@"disableSubmit"] )
    {
    	self.disableSubmit = entity.disableSubmit;
    }
    else if(![json getBoolean:@"disableSubmit"])
    {
    	self.disableSubmit = entity.disableSubmit;
    }
}

+ (RHM_Comercial_TS_CLI_DEST*)getInstance
{
    RHM_Comercial_TS_CLI_DEST* me = [[RHM_Comercial_TS_CLI_DEST alloc] init];
    [me autorelease];
    return me;
}

- (SUPObjectList*)getLogRecords
{
    SUPQuery *query = [SUPQuery getInstance];
    [query from:@"LogRecordImpl":@"a"];
    query.testCriteria = (SUPTestCriteria*)[[SUPAttributeTest match:@"component":@"TS_CLI_DEST"] and:[SUPAttributeTest match:@"entityKey":[self keyToString]]];
    [query orderBy:@"requestId":[SUPSortOrder DESCENDING]];

    RHM_Comercial_LogRecordImplList* list = [RHM_Comercial_LogRecordImpl findWithQuery:query];
    return (SUPObjectList*)list;
}

- (id<SUPLogRecord>)createLogRecord:(int32_t)level withMessage:(NSString*)message
{
    {
        RHM_Comercial_LogRecordImpl *log = [[RHM_Comercial_LogRecordImpl alloc] init];
        //log.level = [NSString stringWithFormat:@"%ld",[SUPLogLevel fromString:level]];
        log.level = level;
        log.message = message;
        log.messageId = [RHM_Comercial_KeyGenerator generateId];
        log.requestId = [NSString stringWithFormat:@"%ld",log.messageId];
        NSDate *timestamp = [NSDate dateWithTimeIntervalSinceNow:0];
        log.timestamp = timestamp;
        log.code = CLIENT_ENTITY_CREATED_LOGRECORD_CODE;
        log.component = @"TS_CLI_DEST";
        log.entityKey = [self keyToString];
        [log save];
        [log autorelease];
        return log;
    }
}

- (void)setAllAttributesFrom:(RHM_Comercial_TS_CLI_DEST*)other
{
	// Child lists are set to nil, to prevent infinite recursion
	// when this method is used inside the bind: method
    	[self setBUKRS:other.BUKRS];
    	[self setKUNNR:other.KUNNR];
    	[self setVKORG:other.VKORG];
    	[self setVTWEG:other.VTWEG];
    	[self setSPART:other.SPART];
    	[self setDESTIN:other.DESTIN];
    	[self setDEFECTO:other.DEFECTO];
    	self->_pending = other->_pending;
    	self->_pendingChange = other->_pendingChange;
    	self->_replayPending = other->_replayPending;
    	self->_replayFailure = other->_replayFailure;
    	[self setSurrogateKey:other.surrogateKey];
    	self->_replayCounter = other->_replayCounter;
    	[self setDisableSubmit:other.disableSubmit];
}

+ (NSObject<SUPCallbackHandler>*)callbackHandler
{
	return _callbackHandler;
}

+ (void)registerCallbackHandler:(NSObject<SUPCallbackHandler>*)newCallbackHandler
{
	if(newCallbackHandler != _callbackHandler)
	{
		[_callbackHandler release];
		_callbackHandler = [newCallbackHandler retain];
	}
}

- (void)refresh
{
    if (!self.isNew)
    {
        RHM_Comercial_TS_CLI_DEST* entity = [RHM_Comercial_TS_CLI_DEST load:[self id]];
        [self copyAll:entity];
		if(self.pending && self.pendingChange == PendingCreate)
		{
			self.originalState = self;
		}
		else
		{
			self.originalState = nil;
			self->_originalStateValid = NO;
		}
        _isNew = NO;
        _isDirty = NO;
    }
}



+ (void)replayAccepted:(SUPJsonObject*)headers withContent:(SUPJsonArray*)content
{
	for (id item in content)
    {
        SUPJsonObject* jsonObject = (SUPJsonObject*)(item);
		int64_t key;
		if ([jsonObject containsKey:@"surrogateKey"]) 
		{
			key = [jsonObject getLong:@"surrogateKey"];
		}
		else
		{
		    key = [jsonObject getLong:@"id"];
		}
        if ([headers containsKey:@"log"]) 
        {
            for(SUPJsonObject *o in [headers getArray:@"log"])
			{
				if(![o containsKey:@"entityKey"])
				{
					RHM_Comercial_TS_CLI_DEST* entity = [[RHM_Comercial_TS_CLI_DEST alloc] init];
					entity.surrogateKey = key;
					[o setString:@"entityKey":[entity keyToString]];
					[entity release];
				}
				[RHM_Comercial_RHM_ComercialDB writeLogFromHeader:o:@"TS_CLI_DEST":@"replay"];
			}
        }

        RHM_Comercial_TS_CLI_DEST* clientEntity = [RHM_Comercial_TS_CLI_DEST find:key];
        if( (clientEntity != nil) && (clientEntity.pending) )
        {
            SUPLong server_id = [SUPBindUtil parseLong:[headers getString:@"id"]];
            SUPLong client_rc = [clientEntity replayPending];
            if(client_rc == server_id)
            {
            	// Server has already sent updated records, so delete the pending ones
                SUPChar pendingChange = clientEntity.pendingChange;
                [clientEntity cancelReplayPending:(SUPAbstractEntity*)clientEntity];
				clientEntity->_originalState = nil;
				clientEntity->_originalStateValid = NO;
				clientEntity.pending = YES;
				clientEntity.pendingChange = pendingChange;
				clientEntity->_isNew = (pendingChange == PendingCreate);
				clientEntity->_isDirty = (pendingChange == PendingUpdate);
				clientEntity->_isDeleted = (pendingChange == PendingDelete);
				if([RHM_Comercial_TS_CLI_DEST callbackHandler])
	        		[[RHM_Comercial_TS_CLI_DEST callbackHandler] onReplaySuccess:clientEntity];       
		        if([RHM_Comercial_RHM_ComercialDB callbackHandler])
		        	[[RHM_Comercial_RHM_ComercialDB callbackHandler] onReplaySuccess:clientEntity];
            }
        }
        
    }
}



+ (void)replayRejected:(SUPJsonObject*)headers withContent:(SUPJsonArray*)content
{
    for (id item in content)
    {
        SUPJsonObject* jsonObject = (SUPJsonObject*)(item);
		int64_t key;
		if ([jsonObject containsKey:@"surrogateKey"]) 
		{
			key = [jsonObject getLong:@"surrogateKey"];
		}
		else
		{
		    key = [jsonObject getLong:@"id"];
		}        
        if ([headers containsKey:@"log"]) 
        {
            for(SUPJsonObject *o in [headers getArray:@"log"])
			{
				if(![o containsKey:@"entityKey"])
				{
					RHM_Comercial_TS_CLI_DEST* entity = [[RHM_Comercial_TS_CLI_DEST alloc] init];
					entity.surrogateKey = key;
					[o setString:@"entityKey":[entity keyToString]];
					[entity release];
				}
				[RHM_Comercial_RHM_ComercialDB writeLogFromHeader:o:@"TS_CLI_DEST":@"replay"];
			}
        }
        RHM_Comercial_TS_CLI_DEST* clientEntity = [RHM_Comercial_TS_CLI_DEST find:key]; 
        [clientEntity retain];
        if(clientEntity != nil)
        {
            SUPLong server_id = [SUPBindUtil parseLong:[headers getString:@"id"]];
            SUPLong client_rc = [clientEntity replayCounter];
            if(client_rc == server_id)
            {
	        	RHM_Comercial_TS_CLI_DEST* originalState = (RHM_Comercial_TS_CLI_DEST*)clientEntity.originalState;
	        	SUPChar pendingChange = clientEntity.pendingChange;
            	[clientEntity replayRejected_childcascade];
            	clientEntity.originalState = originalState;
            	clientEntity.pending = YES;
            	clientEntity.pendingChange = pendingChange;
				clientEntity->_isNew = (pendingChange == PendingCreate);
				clientEntity->_isDirty = (pendingChange == PendingUpdate);
				clientEntity->_isDeleted = (pendingChange == PendingDelete);
			    if([RHM_Comercial_TS_CLI_DEST callbackHandler])
			    	[[RHM_Comercial_TS_CLI_DEST callbackHandler] onReplayFailure:clientEntity];
		        if([RHM_Comercial_RHM_ComercialDB callbackHandler])
		        	[[RHM_Comercial_RHM_ComercialDB callbackHandler] onReplayFailure:clientEntity];
            }
        }
        [clientEntity autorelease];
     }
}



-(void)submitPending
{
	[self submitPending1:YES];
}

-(void)submitPendingNoRefresh
{
	[self submitPending1:NO];
}

-(void)submitPending1:(BOOL)doRefresh
{
    id<SUPConnectionWrapper> connection = nil;
    SUPLocalTransaction* transaction = nil;
    BOOL success = NO;
    SUPJsonMessage* message = nil;
    
    [RHM_Comercial_RHM_ComercialDB checkIfSubscribed];
    //if(_disableSubmit)
    //    return;
    //if(_replayPending == _replayCounter) // already submitted
    //	return;
    @try
    {
        message = [[SUPJsonMessage alloc] init];
        [[RHM_Comercial_RHM_ComercialDB dblock] writeLock];    
        connection = [RHM_Comercial_RHM_ComercialDB getConnectionWrapper];
        transaction = ([connection inTransaction] ? nil : [RHM_Comercial_RHM_ComercialDB beginTransaction]);
    	if(doRefresh)
	        [self refresh];
        if (self.pending && !self.disableSubmit && (self.replayCounter > self.replayPending))
        {
            SUPJsonObject* headers = [message headers];
            [headers setString:@"pkg":@"RHM_Comercial:1.0"];
            [headers setString:@"mbo":@"TS_CLI_DEST"];
            [headers setString:@"method":@"replay"];
            [headers setString:@"id":[SUPStringUtil toString_long:self.replayCounter]];

			
            [message setContent:[self json:2]];
            
            self.replayFailure = 0;
            self.replayCounter = 0;
            self.replayPending = self.replayCounter;
            [self updatePending:YES];
        }
        if (transaction != nil)
        {
            [transaction commit];
        }
        success = YES;
    }
    @catch (NSException* e)
    {
        if (transaction != nil)
        {
            [transaction rollback];
        }
        success = NO;
        @throw e;
    }
    @finally
    {
        [connection releaseToPool];
        [[RHM_Comercial_RHM_ComercialDB dblock] unlock];
        if(success)
            [RHM_Comercial_RHM_ComercialDB replay:@"TS_CLI_DEST" withId:self.replayCounter withContent:[message content]];
        [message release];
    }
}

- (void)submitPending_save_childcascade:(SUPAbstractEntity*)parent
{
	if([self pending])
	{
		self->_replayCounter = parent->_replayCounter;
		[self updatePending:YES];
    }
}

- (void)submitPending_update_childcascade:(SUPAbstractEntity*)parent
{
    if ([self pending])
    {
        //BOOL isCreate = [self isCreated];
	    self.replayFailure = 0;
	    self.replayPending = self.replayCounter;
	    [self updatePending:YES];
        //if(!isCreate)
        //    [self updateOriginalState];
    }        

}

 
+ (void)submitPendingOperations
{
	[super submitPendingOperations];
}

+ (void)cancelPendingOperations
{
	[super cancelPendingOperations];
}

- (NSString*)toString
{
	NSString* str = [NSString stringWithFormat:@"\
	TS_CLI_DEST = \n\
	    BUKRS = %@,\n\
	    KUNNR = %@,\n\
	    VKORG = %@,\n\
	    VTWEG = %@,\n\
	    SPART = %@,\n\
	    DESTIN = %@,\n\
	    DEFECTO = %@,\n\
	    pending = %i,\n\
	    pendingChange = %c,\n\
	    replayPending = %qi,\n\
	    replayFailure = %qi,\n\
	    surrogateKey = %qi,\n\
	    replayCounter = %qi,\n\
	    disableSubmit = %i,\n\
	    isNew = %i,\n\
        isDirty = %i,\n\
        isDeleted = %i,\n\
	\n"
    	,self.BUKRS
    	,self.KUNNR
    	,self.VKORG
    	,self.VTWEG
    	,self.SPART
    	,self.DESTIN
    	,self.DEFECTO
    	,self->_pending
    	,self->_pendingChange
    	,self->_replayPending
    	,self->_replayFailure
    	,self.surrogateKey
    	,self->_replayCounter
    	,self.disableSubmit
		,self.isNew
		,self.isDirty
		,self.isDeleted
	];
	return str;

}

- (NSString*)description
{
	return [self toString];
}

- (void)save
{
    if (self->_isNew)
    {
        [self create];
    }
    else if (self->_isDirty)
    {
        [self update];
    }
}


- (void)createPending:(BOOL)isPending
{
   	id<SUPConnectionWrapper> connection = nil;
    id<SUPStatementWrapper> statement = nil;
    @try
    {
        [[RHM_Comercial_RHM_ComercialDB dblock] writeLock];
    	self->_pending = isPending;
    	if(!isPending)
    	{
    		self->_replayPending = 0;
    		self->_replayFailure = 0;
    	}
    	connection = [RHM_Comercial_RHM_ComercialDB getConnectionWrapper];
    	statement = [self getCreateStatement:connection forTable:MainEntityTable];
		[statement executeInsert];
		self->_isNew = NO;
		self->_isDirty = NO;
		self->_isDeleted = NO;
		if (isPending)
		{
			RHM_Comercial_TS_CLI_DEST* originalEntity = (RHM_Comercial_TS_CLI_DEST*)[self originalState];
			if (originalEntity != nil)
			{
				originalEntity.pending = NO;
				id<SUPStatementWrapper> os_statement = [originalEntity getCreateStatement:connection forTable:OriginalStateEntityTable];
				[os_statement executeInsert];
				[os_statement close];					
			}
		}
    	self->_pending = isPending;
	}
	@catch (SUPPersistenceException *spe)
    {
        //MBOLogPersistenceException(SUPCLIENTRT_TEMPLATE_PERSISTENCEEXCEPTIONMSG,@"createPending",[spe message]);
    	@throw spe;
    }
    @finally
    {
		[statement close];
        [connection releaseToPool];
        [[RHM_Comercial_RHM_ComercialDB dblock] unlock];
    }    
}

- (void)updatePending:(BOOL)isPending
{
   	id<SUPConnectionWrapper> connection = nil;
   	id<SUPStatementWrapper> statement = nil;
    @try
    {
        [[RHM_Comercial_RHM_ComercialDB dblock] writeLock];
    	self->_pending = isPending;
		if(!isPending)
    	{
    		self->_replayPending = 0;
    		self->_replayFailure = 0;
    	}
    	connection = [RHM_Comercial_RHM_ComercialDB getConnectionWrapper];
    	statement = [self getUpdateStatement:connection forTable:MainEntityTable];
		[statement executeUpdate:YES];
		self->_isNew = NO;
		self->_isDirty = NO;
		self->_isDeleted = NO;
	}
	@catch (SUPPersistenceException *spe)
    {
        //MBOLogPersistenceException(SUPCLIENTRT_TEMPLATE_PERSISTENCEEXCEPTIONMSG,@"updatePending",[spe message]);
		@throw spe;
    }
    @finally
    {
		[statement close];
        [connection releaseToPool];
        [[RHM_Comercial_RHM_ComercialDB dblock] unlock];
    }    	
}

- (SUPAbstractEntity*)originalState
{
    if (!self->_originalStateValid)
    {
        self->_originalState = self.pending ? [RHM_Comercial_TS_CLI_DEST find:[self id] inTable:OriginalStateEntityTable] : nil;
        if(self->_originalState == nil && !self.isCreated) self->_originalState = self.downloadState;
        //if(self->_originalState != self) [self->_originalState retain];
        self->_originalStateValid = YES;
    }
    return (SUPAbstractEntity*)(self->_originalState);
}

- (SUPAbstractEntity*)downloadState
{
    if (!self->_downloadStateValid)
    {
        if(self.isNew) 
        {
            self->_downloadState = nil;
        }
        else if(self.pending)
        {
            RHM_Comercial_TS_CLI_DEST *mbo = [RHM_Comercial_TS_CLI_DEST find:[self id]];
            if(mbo)
                self->_downloadState = mbo->_downloadState;
            else
                self->_downloadState = nil;
        }
        else
        {
            self->_downloadState = nil;
        }
        self->_downloadStateValid = YES;
    }
    return (SUPAbstractEntity*)(self->_downloadState);
}


- (void)updateOriginalState
{
   	id<SUPConnectionWrapper> connection = nil;
	id<SUPStatementWrapper> statement = nil;
	BOOL savePending = self->_pending;
    @try
    {
        [[RHM_Comercial_RHM_ComercialDB dblock] writeLock];
    	connection = [RHM_Comercial_RHM_ComercialDB getConnectionWrapper];
		self->_pending = NO;
			
		RHM_Comercial_TS_CLI_DEST* os = [RHM_Comercial_TS_CLI_DEST find:[self id] inTable:OriginalStateEntityTable];
		if(os)
		{
			statement = [self getUpdateStatement:connection forTable:OriginalStateEntityTable];
			[statement executeUpdate:YES];
		} else {
			statement = [self getCreateStatement:connection forTable:OriginalStateEntityTable];
			[statement executeInsert];
		}
		self->_originalStateValid = NO;
	}
	@catch (SUPPersistenceException *spe)
	{
		MBOLogPersistenceException(SUPCLIENTRT_TEMPLATE_PERSISTENCEEXCEPTIONMSG,@"updateOriginalState",[spe message]);
	}
    @finally
    {
		self->_pending = savePending;
		[statement close];
        [connection releaseToPool];
        [[RHM_Comercial_RHM_ComercialDB dblock] unlock];
    }    
    			
}


- (SUPAbstractEntity*)topLevelParent
{
	return self;
}

- (void)update
{
    @throw [SUPNoSuchOperationException getInstance];
}




+ (SUPObjectList*)findAll
{
	return [self findAll:0 take:-1]; 
}


	

+ (SUPObjectList*)findAll:(int32_t)skip take:(int32_t)take
{
	SUPObjectList* result = [[[SUPObjectList alloc] init] autorelease];
	NSMutableString *sql = nil;
	id<SUPStatementWrapper> preparedStatement = nil;
	id<SUPConnectionWrapper> connection = nil;
	id<SUPResultSetWrapper> resultSet = nil;
	
	@try
	{
	    [[RHM_Comercial_RHM_ComercialDB dblock] readLock];
		connection = [RHM_Comercial_RHM_ComercialDB getConnectionWrapper];
		sql = [[NSMutableString alloc] initWithCapacity:307];
	    [sql appendString:@"SELECT x.\"a\",x.\"b\",x.\"c\",x.\"d\",x.\"e\",x.\"f\",x.\"g\",x.\"_pf\",x.\"_pc\",x.\"_rp\",x.\"_rf\",x.\"h\",x.\"_rc\",x.\"_ds\" FROM \"rhm_comercial_1_0_ts_cli_dest\" x where (((x.\"_pf\" = 1 or not exists (select x_os.\"h\" from \"rhm_comercial_1_0_ts_cli_dest_os\" x_os where x_os.\"h\" = x.\"h\"))))"];
	    if(take != -1)
	        [sql appendFormat:@" limit %i",take];
	    if(skip != 0)
	        [sql appendFormat:@" offset %i",skip];
	
		preparedStatement = [connection prepareStatement:sql];
	            
	    resultSet = [preparedStatement executeQuery];
	    while ([resultSet next])
	    {
	        RHM_Comercial_TS_CLI_DEST* entity = [[RHM_Comercial_TS_CLI_DEST alloc] init];
	        [entity bind:resultSet];
	        [result add:entity];
			[entity release];
	    }
	}
	@catch (SUPPersistenceException *spe)
	{
	    MBOLogPersistenceException(SUPCLIENTRT_TEMPLATE_PERSISTENCEEXCEPTIONMSG,@"findAll",[spe message]);
	}
	@finally
	{
		[sql release];
		if(resultSet) [resultSet close];
		if(preparedStatement) [preparedStatement close];
	    [connection releaseToPool];
	    [[RHM_Comercial_RHM_ComercialDB dblock] unlock];
	}
	return result;
}



+ (SUPObjectList*)getPendingObjects
{
	return [self getPendingObjects:0 take:-1]; 
}


	

+ (SUPObjectList*)getPendingObjects:(int32_t)skip take:(int32_t)take
{
	SUPObjectList* result = [[[SUPObjectList alloc] init] autorelease];
	NSMutableString *sql = nil;
	id<SUPStatementWrapper> preparedStatement = nil;
	id<SUPConnectionWrapper> connection = nil;
	id<SUPResultSetWrapper> resultSet = nil;
	
	@try
	{
	    [[RHM_Comercial_RHM_ComercialDB dblock] readLock];
		connection = [RHM_Comercial_RHM_ComercialDB getConnectionWrapper];
		sql = [[NSMutableString alloc] initWithCapacity:225];
	    [sql appendString:@"select x.\"a\",x.\"b\",x.\"c\",x.\"d\",x.\"e\",x.\"f\",x.\"g\",x.\"_pf\",x.\"_pc\",x.\"_rp\",x.\"_rf\",x.\"h\",x.\"_rc\",x.\"_ds\" from \"rhm_comercial_1_0_ts_cli_dest\" x where x.\"_pc\" <> \'N\' and x.\"_rc\" != x.\"_rp\""];
	    if(take != -1)
	        [sql appendFormat:@" limit %i",take];
	    if(skip != 0)
	        [sql appendFormat:@" offset %i",skip];
	
		preparedStatement = [connection prepareStatement:sql];
	            
	    resultSet = [preparedStatement executeQuery];
	    while ([resultSet next])
	    {
	        RHM_Comercial_TS_CLI_DEST* entity = [[RHM_Comercial_TS_CLI_DEST alloc] init];
	        [entity bind:resultSet];
	        [result add:entity];
			[entity release];
	    }
	}
	@catch (SUPPersistenceException *spe)
	{
	    MBOLogPersistenceException(SUPCLIENTRT_TEMPLATE_PERSISTENCEEXCEPTIONMSG,@"getPendingObjects",[spe message]);
	}
	@finally
	{
		[sql release];
		if(resultSet) [resultSet close];
		if(preparedStatement) [preparedStatement close];
	    [connection releaseToPool];
	    [[RHM_Comercial_RHM_ComercialDB dblock] unlock];
	}
	return result;
}



+ (SUPObjectList*)getPendingObjects:(unichar)pendingChange
{
	return [self getPendingObjects:pendingChange skip:0 take:-1]; 
}


	

+ (SUPObjectList*)getPendingObjects:(unichar)pendingChange skip:(int32_t)skip take:(int32_t)take
{
	SUPObjectList* result = [[[SUPObjectList alloc] init] autorelease];
	NSMutableString *sql = nil;
	id<SUPStatementWrapper> preparedStatement = nil;
	id<SUPConnectionWrapper> connection = nil;
	id<SUPResultSetWrapper> resultSet = nil;
	
	@try
	{
	    [[RHM_Comercial_RHM_ComercialDB dblock] readLock];
		connection = [RHM_Comercial_RHM_ComercialDB getConnectionWrapper];
		sql = [[NSMutableString alloc] initWithCapacity:220];
	    [sql appendString:@"select x.\"a\",x.\"b\",x.\"c\",x.\"d\",x.\"e\",x.\"f\",x.\"g\",x.\"_pf\",x.\"_pc\",x.\"_rp\",x.\"_rf\",x.\"h\",x.\"_rc\",x.\"_ds\" from \"rhm_comercial_1_0_ts_cli_dest\" x where x.\"_pc\" = ? and x.\"_rc\" != x.\"_rp\""];
	    if(take != -1)
	        [sql appendFormat:@" limit %i",take];
	    if(skip != 0)
	        [sql appendFormat:@" offset %i",skip];
	
		preparedStatement = [connection prepareStatement:sql];
	            
	    [preparedStatement setChar:1:@"pendingChange":pendingChange];
	    resultSet = [preparedStatement executeQuery];
	    while ([resultSet next])
	    {
	        RHM_Comercial_TS_CLI_DEST* entity = [[RHM_Comercial_TS_CLI_DEST alloc] init];
	        [entity bind:resultSet];
	        [result add:entity];
			[entity release];
	    }
	}
	@catch (SUPPersistenceException *spe)
	{
	    MBOLogPersistenceException(SUPCLIENTRT_TEMPLATE_PERSISTENCEEXCEPTIONMSG,@"getPendingObjects",[spe message]);
	}
	@finally
	{
		[sql release];
		if(resultSet) [resultSet close];
		if(preparedStatement) [preparedStatement close];
	    [connection releaseToPool];
	    [[RHM_Comercial_RHM_ComercialDB dblock] unlock];
	}
	return result;
}



+ (SUPObjectList*)getReplayPendingObjects
{
	return [self getReplayPendingObjects:0 take:-1]; 
}


	

+ (SUPObjectList*)getReplayPendingObjects:(int32_t)skip take:(int32_t)take
{
	SUPObjectList* result = [[[SUPObjectList alloc] init] autorelease];
	NSMutableString *sql = nil;
	id<SUPStatementWrapper> preparedStatement = nil;
	id<SUPConnectionWrapper> connection = nil;
	id<SUPResultSetWrapper> resultSet = nil;
	
	@try
	{
	    [[RHM_Comercial_RHM_ComercialDB dblock] readLock];
		connection = [RHM_Comercial_RHM_ComercialDB getConnectionWrapper];
		sql = [[NSMutableString alloc] initWithCapacity:338];
	    [sql appendString:@"select x.\"a\",x.\"b\",x.\"c\",x.\"d\",x.\"e\",x.\"f\",x.\"g\",x.\"_pf\",x.\"_pc\",x.\"_rp\",x.\"_rf\",x.\"h\",x.\"_rc\",x.\"_ds\" from \"rhm_comercial_1_0_ts_cli_dest\" x where (((x.\"_pf\" = 1 or not exists (select x_os.\"h\" from \"rhm_comercial_1_0_ts_cli_dest_os\" x_os where x_os.\"h\" = x.\"h\")))) and "
	                            "( x.\"_rp\" != 0)"];
	    if(take != -1)
	        [sql appendFormat:@" limit %i",take];
	    if(skip != 0)
	        [sql appendFormat:@" offset %i",skip];
	
		preparedStatement = [connection prepareStatement:sql];
	            
	    resultSet = [preparedStatement executeQuery];
	    while ([resultSet next])
	    {
	        RHM_Comercial_TS_CLI_DEST* entity = [[RHM_Comercial_TS_CLI_DEST alloc] init];
	        [entity bind:resultSet];
	        [result add:entity];
			[entity release];
	    }
	}
	@catch (SUPPersistenceException *spe)
	{
	    MBOLogPersistenceException(SUPCLIENTRT_TEMPLATE_PERSISTENCEEXCEPTIONMSG,@"getReplayPendingObjects",[spe message]);
	}
	@finally
	{
		[sql release];
		if(resultSet) [resultSet close];
		if(preparedStatement) [preparedStatement close];
	    [connection releaseToPool];
	    [[RHM_Comercial_RHM_ComercialDB dblock] unlock];
	}
	return result;
}

/*!
  @method
  @abstract Generated class method 
  @param query
  @throws SUPPersistenceException
 */
+ (int32_t)getSize:(SUPQuery*)query
{
    return [RHM_Comercial_TS_CLI_DEST countWithQuery:query];
}



+ (int32_t)countReplayPendingObjects
{
	int32_t result;
	NSMutableString *sql = nil;
	id<SUPStatementWrapper> preparedStatement = nil;
	id<SUPConnectionWrapper> connection = nil;
	id<SUPResultSetWrapper> resultSet = nil;
	
	@try
	{
	    [[RHM_Comercial_RHM_ComercialDB dblock] readLock];
		connection = [RHM_Comercial_RHM_ComercialDB getConnectionWrapper];
		sql = [[NSMutableString alloc] initWithCapacity:223];
	    [sql appendString:@"select count(*) ,x.\"h\" from \"rhm_comercial_1_0_ts_cli_dest\" x where (((x.\"_pf\" = 1 or not exists (select x_os.\"h\" from \"rhm_comercial_1_0_ts_cli_dest_os\" x_os where x_os.\"h\" = x.\"h\")))) and ( x.\"_rp\" != 0)"];
	
		preparedStatement = [connection prepareStatement:sql];
	            
	    resultSet = [preparedStatement executeQuery];
	    while ([resultSet next])
	    {
	        result = [resultSet getInt:1:@""];
	    }
	}
	@catch (SUPPersistenceException *spe)
	{
	    MBOLogPersistenceException(SUPCLIENTRT_TEMPLATE_PERSISTENCEEXCEPTIONMSG,@"countReplayPendingObjects",[spe message]);
	}
	@finally
	{
		[sql release];
		if(resultSet) [resultSet close];
		if(preparedStatement) [preparedStatement close];
	    [connection releaseToPool];
	    [[RHM_Comercial_RHM_ComercialDB dblock] unlock];
	}
	return result;
}

@end